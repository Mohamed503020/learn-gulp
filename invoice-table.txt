import {
    AfterViewInit,
    Component,
    ElementRef,
    EventEmitter,
    HostListener,
    Input,
    NgZone,
    OnChanges,
    OnInit,
    Output,
    QueryList,
    SimpleChanges,
    TemplateRef,
    ViewChild,
    ViewChildren,
    ViewContainerRef
} from '@angular/core';
import { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';
import { MatDialog, MatDialogConfig } from '@angular/material/dialog';

import { MatSnackBar } from '@angular/material/snack-bar';

import { TranslateService } from '@ngx-translate/core';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { GeneralService } from '../../../../stores/services/general.service';
import { MatSelect } from '@angular/material/select';
import { NgbTooltip } from '@ng-bootstrap/ng-bootstrap';
import { PurchaseService } from '../../../../stores/services/purchase.service';
import { input } from 'jspm/lib/utils/ui';
import { BlockDecimalNumbersService } from 'src/app/modules/shared/services/block-decimal-numbers.service';
import { SerialItemReturnedComponent } from '../../../../stores/components/purchases/purchase/add-purchase/serial-item-returned/serial-item-returned.component';
import { ExpiresItemReturnedComponent } from '../../../../stores/components/purchases/purchase/add-purchase/expires-item-returned/expires-item-returned.component';
import * as moment from 'moment';
import { ThisReceiver } from '@angular/compiler';
import { SerialItemComponent } from 'src/app/modules/stores/components/purchases/purchase/add-purchase/serial-item/serial-item.component';
import Swal from 'sweetalert2';
import { Observable } from 'rxjs/internal/Observable';
import { DisplayTooltipService } from '../../../services/display-tooltip.service';
import { resolve } from 'dns';
import { AddItemCardComponent } from 'src/app/modules/stores/components/main-units/item-card/add-item-card/add-item-card.component';
import { ItemCardService } from 'src/app/modules/stores/services/item-card.service';
import { ScreenTypeId } from '../../../enums/enums';
import { ItemCardDetailsComponent } from 'src/app/modules/stores/components/main-units/item-card/item-card-details/item-card-details.component';
import { AuthCrudPagesService } from 'src/app/modules/auth/services/auth-crud-pages.service';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
import { PurchasesCheckTaxService } from '../../../services/purchases-check-tax.service';
import { ItemNoteDialogComponent } from '../../item-note-dialog/item-note-dialog.component';
import { generalOtherSettings } from 'src/app/modules/users/interfaces/other.interface';

@Component({
    selector: 'app-invoice-table',
    templateUrl: './invoice-table.component.html',
    styleUrls: ['./invoice-table.component.css', '../invoice.component.css']
})
export class InvoiceTableComponent implements OnInit, OnChanges, AfterViewInit {
    // sales >> 1 , purchases , added-permission and item-fund >> 2
    @Input() pageEnum: number;
    @Input() isEditMode: boolean;
    @Input() returnMode: boolean; // to make difference between return page and other pages
    @Input() isCopyMode: boolean;
    @Input() isReturnWithoutStock: boolean;
    @Input() InvoiceTypeId: number; // enum to send it in api
    @Input() formGroup: any;
    @Input() isoutgoingTransfer: boolean = false;
    @Input() formControls: any;
    @Input() ActiveDiscount: boolean; // get this boolean form setting to active discount or not
    @Input() isAutomatedExpirationDate: boolean; // when item card is expiration  if autoChange >> true , not >> false
    // @Input() PersonId: any; // to send person id that selected with all calculation apis
    @Input() unitId: any; // to send unit id that selected with all calculation apis
    @Input() storeId: any; // to send store id that selected with all calculation apis
    // @Input() personCurrentValue:boolean;
    //Remove it
    @Input() other_ShowPriceAndTotalInOutgoingAndIncommingTransfer: boolean; // for show or not price and total in outgoing and incoming transfer
    //@Input() invoiceCode: any; // to send invoiceCode that selected with all calculation apis (in edit mode only)
    @Input() quantityLabel: string;
    @Input() isDecreaseQuantity: boolean; // to increase or decrease quantity input value with quantity that come from api
    @Input() itemCardsArrayInEditMode: any;
    @Input() isFormWithoutPerson: boolean;
    @Input() isDisableTableDiscount: boolean;
    @Input() title: string = '';
    // @Input() discoundCalculation: any; // input come from invoice information by parent component to disable discount inputs
    @Input() isExchangeWithoutStock: boolean; // to check or not on quantity (come form settings api)
    @Input() ActivechangePrice: boolean; // to change or not price (come form settings api)
    @Input() rowTemplate: TemplateRef<any>;
    @Input() isNotDeleteItem: boolean = false;
    @Input() isAvailableQuantity: boolean = true;
    @Input() isParentQuantityCheck: boolean = false;
    @Input() decimals: any;
    @Input() isAddItems: boolean = true; // to hide add mode in return page
    @Input() OpenSerialModal: any;
    @Input() ModifyPricesType: number; //to check or not on price
    @Input() otherSettingsOfUser: any;
    isTaxsPurchasesComponent: boolean;
    isTaxsPurchasesReturnComponent: boolean;

    @Input() isInvoiceComeFromPriceOfferToSales: boolean = false; // to know if invoice come from price offer to sales or not  (transform to sales)
    @Output() netValue = new EventEmitter(); // to send net value that come from api when add new item
    @Output() addInvoicesDetails = new EventEmitter(); // send added or updated item card
    @Output() discountValueChanged = new EventEmitter<object>(); // to emit boolean if discount inputs have values (true >> have values , false >> not )
    @Output() onTableIsUpdated = new EventEmitter(); // when table is in edit mode to disable add or edit button
    @Output() focusOnParentInput = new EventEmitter();

    @ViewChild('quantityTooltip') quantityTooltip: NgbTooltip;
    @ViewChild('editQuantityTooltip') editQuantityTooltip: NgbTooltip;
    @ViewChildren('showQuantityTooltip') showQuantityTooltip: NgbTooltip;
    @ViewChild('itemUnitInputInAddMode') itemUnitInputInAddMode: MatSelect;
    @ViewChild('itemUnitInputInEditMode') itemUnitInputInEditMode: MatSelect;
    // @ViewChild('storeUnit') searchElement: ElementRef | undefined;
    @ViewChild('partQuantityInAddMode') partQuantityInAddMode: ElementRef;
    @ViewChild('partQuantityInEditMode') partQuantityInEditMode: ElementRef;

    @ViewChild('addItemsInput') addItemsInput: ElementRef;
    @ViewChild('inputTextRequest') inputTextRequest: ElementRef;
    @ViewChild('searchButton') searchButton: any;
    @ViewChild('editPrice') editPrice: ElementRef;
    @ViewChild('addPrice') addPrice: ElementRef;
    @ViewChild('addDisValue') addDisValue: ElementRef;
    @ViewChild('editDisValue') editDisValue: ElementRef;
    @ViewChild('addDisRatio') addDisRatio: ElementRef;
    @ViewChild('editDisRatio') editDisRatio: ElementRef;
    @ViewChild('actualQuantity') actualQuantity: ElementRef;

    pageNumberItemDropdown = 1;
    pageSizeItemDropdown = 200;
    partsArrInEditMode: any[];
    partsArrInAddMode: any[] = [];
    isEndOfAutoCompleteDataInAddMode: any;
    isEndOfAutoCompleteDataInEditMode: boolean;
    isFirstRequestInAddMode: boolean;
    isFirstRequestInEditMode: boolean;
    pageNumberInAddMode: number = 1;
    pageNumberInEditMode: number = 1;
    isInScrollModeInAddMode: boolean;
    isInScrollModeEditMode: boolean;
    isAddButtonClicked: boolean;
    generalOtherSettings: any;

    itemDetails = {
        itemCode: '',
        itemNameAr: '',
        itemNameEn: '',
        itemName: '',
        itemId: 0,
        Item: {},
        quantity: null,
        oldQuantity: null,
        unitId: 0,
        discountValue: null,
        total: null,
        price: null,
        discountRatio: null,
        applyVat: true,
        vatRatio: '',
        itemTypeId: 0,
        unitNameAr: '',
        unitNameEn: '',
        unites: [],
        canEdit: true,
        canDelete: true,
        editable: false,
        deleteMode: false,
        quantityInStore: 0,
        storeQuantityWithOutInvoice: 0,
        expireDate: '',
        expiaryData: [],
        VatValue: 0,
        splitedDiscountValue: 0,
        splitedDiscountRatio: 0,
        autoDiscount: 0,
        invoiceSerialDtos: [],
        conversionFactor: 0,
        indexOfItem: 0,
        toolQuantity: '',
        listSerials: [],
        vatValue: 0,
        serials: [[]],
        existedSerials: [],
        extractedSerials: [],
        isBalanceBarcode: false,
        isDiscountRatioItem: false,

        actualQuantity: null,
        quantityDifference: null,
        value: null
    };

    showPartAlert: string;
    @Input() showAlert: string;

    dateForm: FormGroup = this._formBuilder.group({
        expireDateInAddMode: ['']
    });

    copyOfArray: any[] = [];
    itemCards: any[] = [];

    isItemQuantityNotAvilableInStorInAddMode: boolean = false;
    isItemQuantityNotAvilableInStorInEditMode: boolean = false;
    discountTotalInput: boolean;
    getQuantityObj: {
        ItemCode: string;
        InvoiceTypeId: any;
        PersonId: any;
        UnitId: number;
        StoreId: any;
        ParentInvoiceType: string;
        oldData: any;
        InvoiceDate: any;
        InvoiceId: number;
        items: {
            itemId: number;
            conversionFactor: number;
            enteredQuantity: number;
            itemTypeId: number;
        }[];
        serialRemovedInEdit: boolean;
        invoiceType: string;
        priceListId?: number;
        salesManId?: number;
    };
    searchValue: any;
    tableIsUpdated: boolean;
    isInScrollModeInEditMode: boolean;
    expiresItem = false;
    isExpireItemAdded = true; // to hide date input when add expire item
    // purchases settings
    isExpireItem;

    itemsFundsTypeId = ScreenTypeId.itemsFund;
    addPermissionTypeId = ScreenTypeId.AddPermission;
    payPermissionTypeId = ScreenTypeId.ExtractPermission;
    InComingTransferTypeId = ScreenTypeId.IncomingTransfer;
    OutGoingTransferTypeId = ScreenTypeId.OutgoingTransfer;

    purchasesInvoiceEnum: number = 2;
    salesInvoiceEnum: number = 1;
    posInvoiceEnum: number = 3;
    expiryDateEnum = 3;
    storeItemEnum = 1;
    serialEnum = 2;
    serviceEnum = 4;
    compositeEnum = 5;
    noteEnum = 6;
    returnSalesInvoiceTypeId = ScreenTypeId.ReturnSales;
    salesInvoiceTypeId = ScreenTypeId.Sales;
    ReturnPOS = ScreenTypeId.ReturnPOS;
    dateTimeNowFromServer;
    priceOfferInvoiceTypeId = ScreenTypeId.OfferPrice;

    ReturnPurchaseWithoutInvoice = ScreenTypeId.ReturnPurchaseWithoutInvoice;
    ReturnSalesWithoutInvoice = ScreenTypeId.ReturnSalesWithoutInvoice;
    ReturnPosWithoutInvoice = ScreenTypeId.ReturnPosWithoutInvoice;
    isPriceOffer = false;
    @ViewChild('itemsContainer', { read: ViewContainerRef })
    container: ViewContainerRef;
    @ViewChild('item', { read: TemplateRef }) template: TemplateRef<any>;

    // currentEditItemIndex = -1;
    calculationResponse: any;
    isDisabledAddButtonForExpiryItem: boolean = false;
    constructor(
        public dialog: MatDialog,
        public translate: TranslateService,
        public snackBar: MatSnackBar,
        private _generalService: GeneralService,
        private _purchaseService: PurchaseService,

        private _AuthCrudPagesService: AuthCrudPagesService,
        private ngZone: NgZone,
        private _formBuilder: FormBuilder,
        private _displayTooltipService: DisplayTooltipService,
        private _ItemCardService: ItemCardService,
        private router: Router,
        private purchasesCheckTaxService: PurchasesCheckTaxService
    ) {
        this.initializeFlags();

        console.log(this.returnSalesInvoiceTypeId);
        console.log(
            'other_ShowPriceAndTotalInOutgoingAndIncommingTransfer>;',
            this.other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
        );

        this.router.events
            .pipe(filter((event): event is NavigationEnd => event instanceof NavigationEnd))
            .subscribe((event: NavigationEnd) => {
                // Now it's safe to access NavigationEnd specific properties
                console.log('Navigation ended:', event);
                console.log('URL after redirects:', event.urlAfterRedirects);
                // You can now safely check the router's current navigation state
                console.log(
                    'Current navigation state:',
                    this.router.getCurrentNavigation()?.extras?.state?.comeFromisTaxsPurchases
                );
                this.comeFromisTaxsPurchases =
                    this.router.getCurrentNavigation()?.extras?.state?.comeFromisTaxsPurchases;
                console.log(this.comeFromisTaxsPurchases);
                console.log(this.isTaxsPurchasesReturnComponent);
                // if(this.isTaxsPurchasesReturnComponent){

                // }
            });
    }
    initializeFlags(): void {
        this.purchasesCheckTaxService.currentCheckReturnPurchases.subscribe(value => {
            this.isTaxsPurchasesReturnComponent = value;
            console.log(this.isTaxsPurchasesReturnComponent);
        });

        this.purchasesCheckTaxService.currentCheck.subscribe(value => {
            this.isTaxsPurchasesComponent = value;
            console.log(this.isTaxsPurchasesComponent);
        });
    }
    ngAfterViewInit(): void {
        //de 3ashan y3ml foucs 3ala el code awel mayft7
        if (this.isAddItems) {
            this.focusOnCode();
        }
        // (this.title != 'inventory') &&
        this.initializeGetItemQuantityPayLoad();
        this.setIsPriceOffer();
    }
    // use in fillItem and calculation invoice for apis
    itemsForCombinationItemType = [];
    initializeGetItemQuantityPayLoad() {
        console.log(this.itemCards, 'items');

        this.getQuantityObj = {
            ItemCode: this.itemDetails.itemCode,
            InvoiceTypeId: this.InvoiceTypeId ? this.InvoiceTypeId : '',
            PersonId: this.formGroup?.get('personId')?.value?.id
                ? this.formGroup?.get('personId')?.value?.id
                : this.formGroup?.get('personId')?.value,
            UnitId: this.unitId ? this.unitId : 0,
            StoreId: this.storeId ? this.storeId : 0,
            InvoiceId: this.formGroup?.get('invoiceId')?.value,
            ParentInvoiceType: this.formGroup?.get('invoiceCode').value ? this.formGroup?.get('invoiceCode').value : '',
            oldData: this.getValidityItemsInTable(),
            InvoiceDate: moment(this.formGroup?.get('invoiceDate').value).format('YYYY-MM-DD h:mm:ss'),
            items: this.itemsForCombinationItemType,
            serialRemovedInEdit: false,
            invoiceType: this.formGroup?.get('invoiceCode').value,
            priceListId: this.formGroup?.get('priceListId')?.value,
            salesManId: this.formGroup?.get('salesManId')?.value
        };
    }
    serialRemovedInEdit: boolean = false;
    insertSerial; //the serial deleted in invoice and write it again in item code in table
    ngOnChanges(changes: SimpleChanges): void {
        console.log(this.isTaxsPurchasesReturnComponent);
        console.log(this.isTaxsPurchasesComponent);

        console.log(this.otherSettingsOfUser?.settings?.generalOtherSettings, 'generalOtherSettings');

        this.generalOtherSettings = this.otherSettingsOfUser?.settings?.generalOtherSettings;

        console.log(changes, 'changes');
        if (changes.itemCardsArrayInEditMode && (this.isEditMode || this.returnMode)) {
            this.itemCards = this.itemCardsArrayInEditMode;
            this.calculateNumberOfPages();
            this.SaveCopy();
            this.isItemCardsArrayHaveExpireDate();
        }
        if (changes.storeId?.currentValue != changes.storeId?.previousValue && this.itemDetails.itemCode) {
            this.getQuantityObj.StoreId = this.storeId;
            this.itemDetails.quantity = 0;
            this.itemDetails.listSerials = [];
            this.storedSerialOfItems = []; // when change store delete old serials and add new serials
            //because user don't enter before change store
            if (this.getQuantityObj.ItemCode) {
                this.fillItemCardDetails(false, false, this.notFoundIndex);
                this.focusInNext('partQuantityInEditMode');
            }
        }

        if (changes.OpenSerialModal?.currentValue != null) {
            this.openSerialItemSales(this.OpenSerialModal);
        }
        // if(changes.personCurrentValue.currentValue !=changes.personCurrentValue.previousValue){
        //   this.calculateTotalsAndDiscoundValue()
        // }
    }
    isInvoiceComeFromPriceOffer = false;

    openItemCardDetails(itemId: number): void {
        console.log(itemId);

        this.dialog.open(ItemCardDetailsComponent, {
            width: '80%',
            data: { id: itemId }
        });
    }

    canShowDetails: boolean = false;

    comeFromisTaxsPurchases: any;

    ngOnInit(): void {
        console.log(this.isTaxsPurchasesReturnComponent);
        console.log(this.isTaxsPurchasesComponent);
        if (this.isTaxsPurchasesReturnComponent) this.InvoiceTypeId = 27;
        if (this.isTaxsPurchasesComponent) this.InvoiceTypeId = 26;

        console.log(this._AuthCrudPagesService.getAuthCrudPage(30).isShow);
        this.canShowDetails = this._AuthCrudPagesService.getAuthCrudPage(30).isShow;
        // this._AuthCrudPagesService.getAuthCrudPage(30)
        // this.getItemsDropDown(false,false);
        // de ashan elsarf b don rased

        this.isItemQuantityNotAvilableInStorInAddMode = this.isExchangeWithoutStock;
        this.isItemQuantityNotAvilableInStorInEditMode = this.isExchangeWithoutStock;
        //this.initializeGetItemQuantityPayLoad();

        if (this.isInvoiceComeFromPriceOfferToSales) this.isInvoiceComeFromPriceOffer = true;
    }
    /************************************************************************************** */
    /********************************* focus functions ************************************ */
    /************************************************************************************** */

    focusOnCode() {
        debugger;
        if (this.returnMode) return;
        this.inputTextRequest?.nativeElement.focus({ preventScroll: true });
        this.inputTextRequest?.nativeElement.select();
    }
    focusInNext(target?, index?) {
        debugger;
        console.log(this.itemDetails, 'itemDetails');
        console.log({ target });
        console.log(this.ActiveDiscount || this.isDisableTableDiscount);

        if ((this.title == 'outgoingTransfer' || this.title == 'incomingAransferAdd') && target) {
            this[target]?.nativeElement.focus();
            this[target]?.nativeElement.select();
            if (!this.other_ShowPriceAndTotalInOutgoingAndIncommingTransfer)
                this.CheckItemAvailability(true, index >= 0, index);

            console.log(this.itemDetails, 'ITEM DETAILS');

            if (
                this.itemDetails['quantity'] &&
                this.itemDetails['price'] == 0 &&
                !this.other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
            )
                this.SetAlertMessage(
                    this.translate.currentLang === 'ar' ? 'السعر لا يمكن ان يكون صفر' : ' Price can not be zero'
                );

            return;
        }

        //   if(((this.title== 'outgoingTransfer' || this.title == 'incomingAransferAdd') && !this.other_ShowPriceAndTotalInOutgoingAndIncommingTransfer) && target) {

        //     this[target]?.nativeElement.focus();
        //     this[target]?.nativeElement.select();
        //      this.CheckItemAvailability(true, index >= 0, index);

        //     return
        //   }

        if (target) {
            this[target]?.nativeElement.focus();
            this[target]?.nativeElement.select();
        } else {
            // index >= 0
            //   ? this.calculateTotalsAndDiscoundValue(true, true, index)
            //   : this.calculateTotalsAndDiscoundValue(true);
            this.CheckItemAvailability(true, index >= 0, index);
        }
    }
    // lama a3ml focus 3ala el quantity lw heya serial yaft7 el popup else ygeb el Quantity
    focusQuantity(i?) {
        //
        // in edit mode table
        if (i >= 0) {
            if (
                this.pageEnum === this.salesInvoiceEnum &&
                this.itemCards[i].itemTypeId === this.expiryDateEnum &&
                !this.itemCards[i].expireDate &&
                !this.isAutomatedExpirationDate
            )
                this.isInvoiceComeFromPriceOfferToSales = true;
            if (
                (this.pageEnum == this.salesInvoiceEnum && !this.isPriceOffer) ||
                this.pageEnum == this.posInvoiceEnum ||
                (this.pageEnum == this.purchasesInvoiceEnum && this.returnMode)
            ) {
                if (
                    this.itemCards[i].itemTypeId == 2 ||
                    (this.isInvoiceComeFromPriceOfferToSales && this.pageEnum == this.salesInvoiceEnum)
                ) {
                    this.getQuantityObj.ItemCode = this.itemCards[i].itemCode;
                    this.fillItemCardDetails(true, true, i, false, true);

                    //this.openSerialItemSales(i);
                }
                // else if (this.isInvoiceComeFromPriceOfferToSales && this.pageEnum == this.salesInvoiceEnum){
                //   this.getQuantityObj.ItemCode = this.itemCards[i].itemCode;
                //             this.fillItemCardDetails(false, true, i);
                // }
                else {
                    if (this.itemCards[i].itemTypeId == this.expiryDateEnum && this.isAutomatedExpirationDate) {
                        this.getQuantityObj.ItemCode = this.itemCards[i].itemCode;
                    }
                    if (
                        (this.InvoiceTypeId == this.returnSalesInvoiceTypeId &&
                            this.itemCards[i].itemTypeId === this.expiryDateEnum) ||
                        (this.InvoiceTypeId == this.ReturnPOS && this.itemCards[i].itemTypeId === this.expiryDateEnum)
                    )
                        this.getQuantityOnRow(i, false, false);
                    else this.getQuantityOnRow(i, true, false);
                }
            }
            // open serial popup in purchases
            else if (this.pageEnum == this.purchasesInvoiceEnum) {
                this.getQuantityOnRow(i, true, false);
                this.itemCardPurchasePopups(this.itemCards[i].itemTypeId, true, i);
            }
        }

        // in add mode table
        else {
            if (
                (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum) &&
                !this.isPriceOffer
            ) {
                if (this.itemDetails.itemTypeId == 2) {
                    this.openSerialItemSales();
                }
                else if (this.itemDetails.itemTypeId == this.expiryDateEnum && this.isAutomatedExpirationDate) {
                    this.getQuantityObj.ItemCode = this.itemDetails.itemCode;

                    //this.getQuantityObj.UnitId = this.itemDetails.unitId;
                    this.fillItemCardDetails(false, false, i, this.isUnitChange);
                } else if (this.itemDetails.itemTypeId == this.expiryDateEnum && !this.isAutomatedExpirationDate) {
                    this.fillItemCardDetails(false, false, i);
                } else {
                    // this.fillItemCardDetails(false, false, i);
                }
            }
            // open serial popup in purchases
            else if (this.pageEnum == this.purchasesInvoiceEnum) {
                //
                this.itemCardPurchasePopups(this.itemDetails.itemTypeId, false, i);
            }
        }
        if (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum)
            this.isItemCardsArrayHaveExpireDate();
    }
    /************************************************************************************** */
    /****************************** start of Get ItemsCard ********************************* */
    /************************************************************************************** */
    searchByItemCardCode(codeValue: any, isEditMode, index?: number) {
        debugger;
        // console.log(this.displayedItems.some(item => item.itemCode.toLowerCase() == codeValue.toLowerCase()), codeValue, this.displayedItems);
        //
        // console.log(this.oldAvailableSerials.includes(codeValue.toLowerCase()));
        // console.log(this.itemCards.some(el => el.listSerialsForCheck?.some(i => i.toLowerCase().trim() == codeValue.toLowerCase().trim())));

        if (
            (this.itemCards.some(item => item.itemCode.toLowerCase().trim() == codeValue.toLowerCase().trim()) ||
                this.oldAvailableSerials?.some(item => item.toLowerCase().trim() == codeValue.toLowerCase().trim()) ||
                this.itemCards?.some(
                    el => el.listSerialsForCheck?.some(i => i.toLowerCase().trim() == codeValue.toLowerCase().trim())
                )) &&
            this.title == 'inventory'
        ) {
            this.SetAlertMessage('canNotSelectThisItemBecauseItSelected');
            return;
        }
        // else if (this.title == 'inventory' && this.displayedItems.some(item => item?.existedSerials?.includes(codeValue.toLowerCase))){
        //     console.log("Heeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeere");

        // }
        if (this.itemCards.length >= 200) {
            this.SetAlertMessage('max-number-is200');
            this.isAddButtonClicked = false;
            return;
        }
        //
        // when choose serial was deleted from invoice but change item before insert this item in table
        // insert serials in storedSerialOfItems again before deleted from itemDetails
        //serial
        if (this.storedSerialOfItems) {
            let index = this.getIndexOfExistSerialItemInTable(this.itemDetails.itemId);
            if (index > this.notFoundIndex)
                this.storedSerialOfItems[index].storedSerials = [
                    ...this.storedSerialOfItems[index].storedSerials,
                    ...this.itemDetails.listSerials
                ];
        }
        //serial
        this.resetItemDetailsObject();
        this.disableTotalDis('', index);
        if (codeValue == '') {
            this.itemDetails.itemName = '';
            return;
        }

        this.getQuantityObj = {
            ...this.getQuantityObj,
            ...{ ItemCode: codeValue.trim() }
        };
        // if (isEditMode) {
        //   this.itemCards[index].quantity = 0;
        // } else {
        this.itemDetails.quantity = 0;
        // }

        this.fillItemCardDetails(true, isEditMode, index);
    }
    resetItemsDropdown() {
        this.partsArrInAddMode = [];
    }

    getItemsDropDown(isSearchByCode: boolean, isInSearchMode: boolean) {
        let code = '';
        if (isSearchByCode) {
            this.pageSizeItemDropdown = 10;
            code = this.searchValue;
        } else {
            this.pageSizeItemDropdown = 500;
            code = '';
        }
        this._generalService
            .getItemCardsDropDown(
                this.pageNumberItemDropdown,
                this.pageSizeItemDropdown,
                encodeURIComponent(this.searchValue),
                false,
                '',
                this.InvoiceTypeId
            )
            .subscribe({
                next: res => {
                    if (res.result === 1 && res.data.length > 0) {
                        this.dateTimeNowFromServer = res.dateTimeNow;
                        this.dateForm.controls.expireDateInAddMode.setValue(
                            moment(this.dateTimeNowFromServer).format('YYYY-MM-DD')
                        );
                        if (res.note === 'End of data') this.isEndOfAutoCompleteDataInAddMode = true;
                        this.ngZone.run(() => {
                            // this.filterForm.controls.itemId.patchValue(res.data[0].id);
                            if (this.title == 'inventory' && this.itemCards.length > 0) {
                                console.log(this.displayedItems, this.itemCards);

                                res.data = res.data.filter(item => {
                                    return !this.itemCards.some(el => el.itemId == item.id);
                                });
                            }
                            if (isSearchByCode) {
                                this.itemDetails.Item = res.data[0];
                            } else if (isInSearchMode) {
                                this.partsArrInAddMode = res.data;
                            } else {
                                this.partsArrInAddMode = [...this.partsArrInAddMode, ...res.data];
                            }
                        });
                    } else if (isSearchByCode) {
                        this.resetItemsDropdown();
                    }
                }
            });
    }
    filterItemsAutoCompleteDropdown(searchValue: any, isInEditMode: boolean) {
        if (searchValue == 'restSearchValueForApi') this.searchValue = '';
        else {
            this.searchValue = searchValue;
            this.getItemsDropDown(false, true);
        }
    }
    setAutocompletePageNumber(event) {
        // if (isEditMode && !this.isEndOfAutoCompleteDataInEditMode)
        this.pageNumberItemDropdown = event;
        // else if (!isEditMode && !this.isEndOfAutoCompleteDataInAddMode)
        // this.pageNumberInAddMode = event;
    }
    // getDropdownData(isEditMode) {
    //   if (this.itemCards.length >= 200) {
    //     this.SetAlertMessage('max-number-is200');
    //     this.isAddButtonClicked = false;
    //     return;
    //   }
    //   this.getItemCardDropDown(isEditMode);
    // }
    setDetailsOfItem(data, isEditMode: boolean, indexOfEditItems: number) {
        let itemCard = this.returnItemCardInAddOrEditMode(indexOfEditItems, isEditMode);
        itemCard.itemCode = data.itemCode;
        itemCard.itemNameAr = data.arabicName;
        itemCard.itemNameEn = data.latinName;
        itemCard.itemId = data.id;
        itemCard.quantity = 0;
    }
    setSelectedOptionId(event, isEditMode: boolean, indexOfEditItems?: number) {
        console.log(event, this.getQuantityObj);
        debugger;
        this.getQuantityObj.ItemCode = event.itemCode;
        this.setDetailsOfItem(event, isEditMode, indexOfEditItems);
        this.fillItemCardDetails(true, isEditMode, indexOfEditItems);
        this.closeTooltip(isEditMode);
        this.resetItemsDropdown();
    }
    /************************************************************************************** */
    /****************************** Unites Ger And Change********************************** */
    /************************************************************************************** */

    getUnitsDropdownForItem(id: number, isEdit: boolean, index?: number) {
        //
        if (isEdit && this.itemCards[index].getUnits) return;
        this._generalService.getUnitsForItemCard(id).subscribe(res => {
            if (res.data) {
                //
                if (isEdit) {
                    this.itemCards[index].unites = this.SavedObject.unites = [...res.data];
                    this.itemCards[index].getUnits = this.SavedObject.getUnits = true;
                } else {
                    this.itemDetails.unites = [...res.data];
                }
                console.log('unit', this.itemDetails.unitId);
            }
        });
    }
    isUnitChange = false;
    changeUnit(e, isEditMode?, index?) {
        console.log('iii', e);

        if (this.getQuantityObj.UnitId == +e) return;
        this.getQuantityObj.UnitId = +e;
        this.isUnitChange = true;
        if (isEditMode) {
            this.itemCards[index].quantity = 0;
            this.getQuantityObj.ItemCode = this.itemCards[index].itemCode;
            // this.getQuantityOnRow(index, true, false);
        } else {
            this.itemDetails.quantity = 0;
            this.getQuantityObj.ItemCode = this.itemDetails.itemCode;
            // this.fillItemCardDetails(false, isEditMode, index, true);
            // this.focusInNext('partQuantityInAddMode');
        }
        // ana bndh hena 3ashan t3'yrly el unit name w el quantity and other data
        this.fillItemCardDetails(false, isEditMode, index, true);
    }
    /************************************************************************************** */
    /******************************Fill item row Data ************************************* */
    /************************************************************************************** */

    //========================= Conditions and Check Functions =========================
    checkIfTheItemsCantBeAdded(res) {
        return (
            (res.data.item.typeId == this.serviceEnum || res.data.item.typeId == this.compositeEnum) &&
            this.InvoiceTypeId == this.OutGoingTransferTypeId
        );
    }
    checkIfSerialIsExistInItemCardsArray(serials, index) {
        let otherSerials = [];
        this.itemCards.forEach((el, i) => {
            if (el.listSerials || (index >= 0 && i != index)) {
                el.listSerials.forEach(element => {
                    if (element.toUpperCase() == serials[0].toUpperCase()) {
                        otherSerials.push(element);
                    }
                });
            }
        });
        return otherSerials.length > 0;
    }
    //========================= gets and calling apis =========================
    fillItemCardDetails(
        isCode?: boolean,
        isEdit?: boolean,
        index?: number,
        isUnitChange?: boolean,
        getAllSerialsOnly?: boolean
    ) {
        debugger;
        // if (this.isTaxsPurchasesComponent) {
        //     console.log('fillItemCardDetails(isCode?:');
        // }

        if (this.isTaxsPurchasesComponent) {
            this.InvoiceTypeId = 26;
        }

        if (!this.isParentQuantityCheck) {
            //to reset Tooltip
            if (index >= 0 && isEdit && this.title != 'inventory') {
                this.editQuantityTooltip.ngbTooltip = null;
            } else {
                this.quantityTooltip.ngbTooltip = null;
            }
            // check if person id is not found
            // when page is not add permission or items funds
            if (this.title != 'inventory') {
                if (this.checkIfPersonIsExisted()) {
                    this.showAddCustomerErrorAlert();
                    return;
                }
            }
            if (!this.storeId) {
                this.SetAlertMessage('selectStore');
                this.focusOnCode();
                return;
            }
        }
        /**************************** Set Data before request ******************************************* */
        this.setItemCodePayloadBeforeRequest(isEdit, index, isUnitChange);
        /******************************************************************************************************** */
        this.getItemCardByCode(isCode, isEdit, index, getAllSerialsOnly);
    }

    // belongs to getItemCardByCode and CalculationOfInvoices apis
    setItemsForInvoices(index: number) {
        this.itemsForCombinationItemType = [];
        this.itemCards?.forEach((el, elIndex) => {
            let item = {
                conversionFactor: el.conversionFactor,
                itemId: el.itemId,
                itemTypeId: el.itemTypeId,
                enteredQuantity: el.quantity,
                enteredExpiryDate: el.expireDate
            };
            this.itemsForCombinationItemType.push({ ...item });
        });
        this.getQuantityObj.items = this.itemsForCombinationItemType;
        // in edit mode we need to send all items except current item which updated
        if (index >= 0) this.getQuantityObj.items.splice(index, 1);
    }
    // quantityDisabled: boolean = false
    getItemCardByCode(isCode: boolean, isEdit: boolean, index: number, getAllSerialsOnly?: boolean) {
        debugger;
        this.setItemsForInvoices(index);
        //
        console.log(this.getQuantityObj, 'QQ');

        this._ItemCardService.getItemCardByCode(this.getQuantityObj).subscribe(res => {
            if (res.result != 1) {
                this.setBackendErrorMessage(res);
                this.resetItemDetailsObject();
                this.focusOnCode();
                return;
            }
            //
            this.dateForm.controls.expireDateInAddMode.setValue(moment(res.dateTimeNow).format('YYYY-MM-DD'));

            if (isEdit && this.title == 'inventory' && res.data.item.typeId != 2) {
                this.displayedItems[index].quantity = this.itemCards[index].quantity =
                    res.data.storeQuantityWithOutInvoice;
                this.displayedItems[index].actualQuantity = this.itemCards[index].actualQuantity = null;
                this.displayedItems[index].quantityDifference = this.itemCards[index].quantityDifference = null;
            }

            if (!isEdit && this.title == 'inventory') this.itemDetails.quantity = res.data.storeQuantityWithOutInvoice;
            // this.quantityDisabled = true
            if (
                !res.data ||
                (res.data.item.typeId !== 1 &&
                    res.data.item.typeId !== this.serialEnum &&
                    res.data.item.typeId !== this.expiryDateEnum &&
                    res.data.item.typeId !== this.serviceEnum &&
                    res.data.item.typeId !== this.noteEnum &&
                    res.data.item.typeId !== this.compositeEnum &&
                    this.pageEnum != this.purchasesInvoiceEnum)
            ) {
                // when user enter wrong code we need to return previous code
                this.resetItemDetailsObject();
                this.showItemCardErrorAlert(res.result);
                this.focusOnCode();
                return;
            }
            if (res.data.item.typeId == this.noteEnum) {
                this.setDataInItemCard(res.data, isEdit);
                this.itemDetails.canEdit = false;
                this.checkItemIfAvilableToUnShiftItemsToItemsDetails();
            }
            // else if (res.data.isBalanceBarcode){
            //   this.setDataInItemCard(res.data, isEdit);
            //   if (this.checkIfTheQuantityOfItemIsMoreThanStoreQuantity()) {
            //     this.SetAlertMessage();
            //     this.isAddButtonClicked = false;
            //   }else{
            //     this.unshiftItemDetailsToItemCards();
            //     //this.isAddButtonClicked = true;
            //     //this.resetItemCardArrayAndCurrentMode();
            //   }
            //   return;
            // }
            else if (this.checkIfTheItemsCantBeAdded(res)) {
                this.resetItemDetailsObject();
                let message =
                    res.data.item.typeId == this.serviceEnum ? 'ServiceItemNotAvailable' : 'compositeItemNotAvailable';
                this.SetAlertMessage(message);
                this.focusOnCode();
            } else if (res) {
                //serial
                // if this serial was deleted -- set this serial in listSerials to open Tooltip
                if (this.serialRemovedInEdit) res.data.listSerials = [this.insertSerial];
                //serial

                if (isEdit) {
                    this.setDataInItemCard(res.data, isEdit, index);
                    if (!getAllSerialsOnly) this.itemCards[index].listSerials = res.data.listSerials;
                } else {
                    this.setDataInItemCard(res.data, isEdit);
                    if (
                        this.InvoiceTypeId == this.salesInvoiceTypeId ||
                        this.InvoiceTypeId == this.returnSalesInvoiceTypeId ||
                        this.InvoiceTypeId == this.payPermissionTypeId ||
                        this.InvoiceTypeId == this.OutGoingTransferTypeId
                    )
                        this.itemDetails.listSerials = res.data.listSerials;
                    // when item card is serial
                }
                this.focusOnParentInput.emit(index);
                //
                // *to make difference between sales and purchases
                if (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum) {
                    this.ItemCardSalesPopups(res.data, isEdit, index);
                } else {
                    //
                    this.itemCardPurchasePopups(res.data.item.typeId, isEdit, index);
                }
                if (isCode) {
                    this.getUnitsDropdownForItem(res.data?.itemId, isEdit, index);
                }

                if (!this.isPriceOffer) {
                    //if Return Mode Quantity will be invoice Quantity
                    let Quantity = this.quantityHandling(res.data);
                    if (this.title != 'inventory') {
                        this.OpenTooltip(isEdit, isEdit ? index : this.notFoundIndex, Quantity, res.data?.itemId);
                    }
                }
            }
        });
    }
    //========================= setting data  ================================

    setItemCodePayloadBeforeRequest(isEdit: boolean, index: number, isUnitChange: boolean) {
        debugger;
        console.log(this.formGroup);

        this.getQuantityObj.PersonId = this.formGroup?.get('personId')?.value?.id
            ? this.formGroup?.get('personId')?.value?.id
            : this.formGroup?.get('personId')?.value;
        this.getQuantityObj.StoreId = this.storeId;
        this.getQuantityObj.ParentInvoiceType = this.formGroup?.get('invoiceCode').value
            ? this.formGroup?.get('invoiceCode').value
            : '';
        this.getQuantityObj.InvoiceTypeId = this.InvoiceTypeId ? this.InvoiceTypeId : '';
        this.getQuantityObj.oldData = this.getValidityItemsInTable(isEdit ? index : this.notFoundIndex);

        if (!this.getQuantityObj.ParentInvoiceType) {
            this.getQuantityObj.ParentInvoiceType = this.formGroup?.get('parentInvoiceCode')?.value
                ? this.formGroup?.get('parentInvoiceCode')?.value
                : '';
        }

        if (this.InvoiceTypeId == this.salesInvoiceTypeId || this.InvoiceTypeId == this.priceOfferInvoiceTypeId) {
            this.getQuantityObj.priceListId = this.formGroup?.get('priceListId')?.value
                ? this.formGroup?.get('priceListId')?.value
                : 1;
            this.getQuantityObj.salesManId = this.formGroup?.get('salesManId')?.value?.id
                ? this.formGroup?.get('salesManId').value.id
                : 1;
        }
        if (!isUnitChange) {
            this.getQuantityObj.UnitId = 0;
        }
        this.getQuantityObj.InvoiceId = this.isCopyMode ? 0 : this.formGroup?.get('invoiceId').value;
        this.getQuantityObj.InvoiceDate = moment(this.formGroup?.get('invoiceDate').value).format(
            'YYYY-MM-DD HH:mm:ss'
        );
        //
        //check this serial in invoice and deleted to send serialRemovedInEdit to backend and return item without check in database
        this.serialRemovedInEdit = false;
        for (let i = 0; i < this.storedSerialOfItems?.length; i++) {
            let arrayOfSerilas = this.storedSerialOfItems[i].storedSerials;
            for (let el of arrayOfSerilas) {
                if (el === this.getQuantityObj.ItemCode.toUpperCase()) {
                    this.serialRemovedInEdit = true;
                    this.insertSerial = this.getQuantityObj.ItemCode.toUpperCase();
                    break;
                }
            }
            if (this.serialRemovedInEdit) break;
        }

        // this.serialRemovedInEdit = this._SerialService.checkThisSerialWasDeleted(this.storedSerialOfItems, "storedSerials", this.getQuantityObj.itemCode);
        // if(this.serialRemovedInEdit) this.insertSerial = this.getQuantityObj.itemCode.toUpperCase()

        this.getQuantityObj.serialRemovedInEdit = this.serialRemovedInEdit;
        this.getQuantityObj.invoiceType = this.formGroup?.get('invoiceCode').value;
    }

    setDataInItemCard(data, isEdit: boolean, index?: number) {
        console.log(data, this.displayedItems);
        // if (this.title == 'inventory' && this.displayedItems.some(item => item.itemId == data.itemId)) {
        //     this.SetAlertMessage('canNotSelectThisItemBecauseItSelected');
        //     return
        // };
        // if (this.title == 'inventory' && this.displayedItems.length > 0) {
        //     console.log(this.displayedItems);

        //     res.data = res.data.filter(item => {
        //         return !this.displayedItems.some(el => el.itemId == item.id);
        //     });
        // }

        let itemCard: any;
        if (isEdit) itemCard = this.itemCards[index];
        else {
            itemCard = this.itemDetails;
            itemCard.expireDate = '';
        }
        // if Item sacle-barcode (باركود الميزان ) set  the quantity and price from api
        if (data.isBalanceBarcode) {
            itemCard.quantity = data.itemQuantity;
            itemCard.total = data.itemCost;
            itemCard.balanceBarcode = data.balanceBarcode;
            itemCard.isBalanceBarcode = data.isBalanceBarcode;
        }
        itemCard.price = data.price;
        itemCard.applyVat = data.applyVat;
        itemCard.vatRatio = data.vat;
        itemCard.itemTypeId = data.item.typeId;
        itemCard.quantityInStore = data.quantityInStore;
        itemCard.storeQuantityWithOutInvoice = data.storeQuantityWithOutInvoice;
        itemCard.conversionFactor = data.conversionFactor;
        itemCard.itemNameAr = data.item.arabicName;
        itemCard.itemNameEn = data.item.latinName;
        itemCard.itemCode = data.item.itemCode;
        itemCard.itemId = data.itemId;
        itemCard.Item = data.item;
        itemCard.unitId = data.unitId;
        itemCard.unitNameAr = data.unit.arabicName;
        itemCard.unitNameEn = data.unit.latinName;
        itemCard.existedSerials = data.existedSerials;
        itemCard.expiaryData = data.expiaryData;
        itemCard.extractedSerials = data.extractedSerials;
        itemCard.isDiscountRatioItem = false;
        // itemCard.listSerials = data.listSerials;
        this.unitId = data.unitId;
        //
        // سيريال
        let indexOfExistSerialItem = 0;
        this.getUsedSerials();
        if (
            this.InvoiceTypeId == this.salesInvoiceTypeId ||
            this.InvoiceTypeId == this.returnSalesInvoiceTypeId ||
            this.InvoiceTypeId == this.payPermissionTypeId ||
            this.InvoiceTypeId == this.OutGoingTransferTypeId
        ) {
            //if (this.pageEnum == this.salesInvoiceEnum)
            if (this.storedSerialOfItems)
                indexOfExistSerialItem = this.getIndexOfExistSerialItemInTable(itemCard.itemId);
            if (indexOfExistSerialItem > this.notFoundIndex) {
                let serialsNotInStoredSerialOfItems = [];
                this.pushNewSerialsInStoredSerials(
                    data.existedSerials,
                    indexOfExistSerialItem,
                    true,
                    serialsNotInStoredSerialOfItems
                );
                // in return mode .. existedSerials in data = null so i set this condition
                if (!this.returnMode)
                    this.storedSerialOfItems[indexOfExistSerialItem].storedSerials = [
                        ...this.storedSerialOfItems[indexOfExistSerialItem].storedSerials,
                        ...serialsNotInStoredSerialOfItems
                    ];
            } else {
                if (!this.returnMode) {
                    if (data.existedSerials)
                        this.pushSerialsAndIdInStoredSerialOfItems(data.itemId, data.existedSerials);
                } else if (itemCard.listSerials)
                    this.pushSerialsAndIdInStoredSerialOfItems(itemCard.itemId, itemCard.listSerials);
            }
        }

        // if (indexOfExistSerialItem > this.notFoundIndex){
        //   let serialsNotInStoredSerialOfItems = [] // array of serials (back end) not in storedSerialOfItems array
        //   //loop for data from back end to insert new serials in storedSerialOfItems array
        //   for(let i = 0; i < data.existedSerials?.length ; i++){
        //     if(this.storedSerialOfItems[indexOfExistSerialItem].storedSerials.indexOf(data.existedSerials[i]) === this.notFoundIndex
        //     && this.usedSerials.indexOf(data.existedSerials[i]) === this.notFoundIndex
        //     ) {
        //     //  if(this.usedSerials.indexOf(data.existedSerials[i]) === this.notFoundIndex)
        //       serialsNotInStoredSerialOfItems.push(data.existedSerials[i])
        //     }
        //   }
        //  // if (serialsNotInStoredSerialOfItems)
        //  // in return mode .. existedSerials in data = null so i set this condition
        //  if (!this.returnMode) this.storedSerialOfItems[indexOfExistSerialItem].storedSerials =  [...this.storedSerialOfItems[indexOfExistSerialItem].storedSerials , ...serialsNotInStoredSerialOfItems]

        // }
        // else
        // if (!this.returnMode) this.storedSerialOfItems.push({id:data.itemId, storedSerials :data.existedSerials})
        // else this.storedSerialOfItems.push({id:itemCard.itemId, storedSerials :itemCard.listSerials})
    }

    quantityHandling(quantityObject) {
        // this function to  quantity calculate

        const isIncomingTransfer = this.InvoiceTypeId == this.InComingTransferTypeId;
        debugger;

        if (this.isParentQuantityCheck && !isIncomingTransfer) return;

        let Quantity;
        let storQuantity = quantityObject.quantityInStore
            ? quantityObject.quantityInStore
            : quantityObject.storeQuantity;
        if (this.returnMode && this.pageEnum == this.purchasesInvoiceEnum) {
            //invoiceQuantity
            Quantity = {
                invoiceQuantity: +quantityObject.invoiceQuantity.toFixed(this.decimals),
                storQuantity: +storQuantity?.toFixed(this.decimals),
                storeQuantityWithOutInvoice: +quantityObject.storeQuantityWithOutInvoice.toFixed(this.decimals)
            };
        } else if (this.returnMode) {
            Quantity = +(quantityObject.storeQuantityWithOutInvoice - storQuantity).toFixed(this.decimals);
        }
        // } else if (this.isCopyMode) {
        //   Quantity = +storQuantity;
        // } else if (this.InvoiceTypeId == this.InComingTransferTypeId) {
        // } else {
        // }
        else Quantity = +quantityObject.storeQuantityWithOutInvoice;
        return Quantity;
    }
    serialCodeSearchResulthandling(data, isEdit: boolean, index?: number) {
        // if Item is Serial
        // if item is serial and Search by Serial Code the backEnd return Serial Code in listSerials
        //
        // && this.itemCards.length > 0
        if (data.listSerials.length > 0 && this.title != 'inventory') {
            //Check if this Serial is Existed in item Cards Array
            if (this.checkIfSerialIsExistInItemCardsArray(data.listSerials, index)) {
                this.SetAlertMessage('serial-not-available-in-stock');
                blur();
                this.resetItemDetailsObject();
                this.focusOnCode();
                return;
            } else {
                if (isEdit) this.itemCards[index].quantity = 1;
                else this.itemDetails.quantity = 1;
                this.getUnitsDropdownForItem(data.itemId, isEdit, index);

                this.calculateTotalsAndDiscoundValue(true, isEdit, index);
            }
        } else {
            this.serialsCout = data.quantityInStore;
            this.openSerialItemSales(index);
        }
    }
    serialsCout: number = 0;
    setIsPriceOffer() {
        this.isPriceOffer = this.InvoiceTypeId === this.priceOfferInvoiceTypeId;
    }

    focusOnQuantityInputInPriceOfferPage(isInEditTableMode: boolean) {
        console.log('focusOnQuantityInputInPriceOfferPage');

        isInEditTableMode ? this.focusInNext('partQuantityInEditMode') : this.focusInNext('partQuantityInAddMode');
    }
    async ItemCardSalesPopups(data, isEdit: boolean, index?: number) {
        if (this.isPriceOffer && !this.isInvoiceComeFromPriceOfferToSales) {
            this.focusOnQuantityInputInPriceOfferPage(isEdit);
            return;
        }
        if (isEdit && !this.isInvoiceComeFromPriceOfferToSales) {
            if (data.item.typeId == this.serialEnum) {
                this.serialCodeSearchResulthandling(data, isEdit, index);
            } else {
                this.focusInNext('partQuantityInEditMode');
            }
        } else if (isEdit && data.item.typeId == this.expiryDateEnum && this.isInvoiceComeFromPriceOfferToSales) {
            if (data.item.typeId == this.expiryDateEnum) {
                if (!this.isAutomatedExpirationDate) {
                    this.openExpireItemModal(index);
                } else {
                    //this.focusInNext('partQuantityInAddMode');
                }
            }
        } else {
            if (data.item.typeId == this.serialEnum) {
                await this.serialCodeSearchResulthandling(data, isEdit, index);
            } else if (data.item.typeId == this.expiryDateEnum) {
                if (!this.isAutomatedExpirationDate) {
                    this.openExpireItemModal();
                } else {
                    this.focusInNext('partQuantityInAddMode');
                }
            } else {
                if (this.title == 'inventory') this.focusInNext('actualQuantity');
                else this.focusInNext('partQuantityInAddMode');
                console.log('ItemCardSalesPopups');
            }
        }
    }
    /**************************************************************************************** */
    /******************************* Quantities Calculations ******************************** */
    /**************************************************************************************** */
    //========================= Conditions and Check Functions =========================
    async CheckOverQuantityInInvoiceFrontSide(
        quantity,
        item,
        isEdit: boolean,
        index: number,
        isSaveToItemsList: boolean
    ) {
        debugger;
        let total = this.calculateTotalOfAllItemCardsQuantity(item, index);
        if (this.returnMode && this.pageEnum == this.purchasesInvoiceEnum) {
            this.returnModePurchasesQuantity(quantity.storQuantity, quantity.invoiceQuantity, item, total);
        } else if (this.pageEnum == this.purchasesInvoiceEnum && this.isActiveAnyQuantityCheck(item)) {
            let currentQuntity = +(total + +item.quantity + +quantity).toFixed(this.decimals);

            if (currentQuntity < 0 || quantity < 0) {
                this.SetAlertMessage();
                this.isLessThanQuantityOfSales = true;
                return;
            } else {
                this.isLessThanQuantityOfSales = false;
            }
        } else {
            this.normalMoodQuantityCheck(quantity, isEdit, item, total);
        }

        if (this.checkIfItemQuantityNotAvilable(item, isEdit) || this.checkIfReturnItemIsAvilable()) {
            this.SetAlertMessage();
            this.isAddButtonClicked = false;
            return;
        } else if (isSaveToItemsList) this.checkPriceChangeAvailability(isEdit, index);
    }
    checkIfReturnItemIsAvilable() {
        return this.isOverInvoice || this.isOverStor;
    }
    //status if 1 -> add 2-> update 0->check only
    isCheckIfOverQuantity;
    CheckIfOverQuantity(item: any, isEdit?: boolean, index?: number, isSaveToItemsList?: boolean) {
        debugger;
        if (!item.itemId) return;
        if (this.title != 'inventory') {
            if (this.itemDetails.price == 0 || this.itemDetails.quantity == 0) return;
        }

        if (item.itemTypeId == this.noteEnum || item.itemTypeId == this.serviceEnum) {
            return;
        } else if (item.itemTypeId == this.serialEnum) {
            this.CheckOverQuantityInInvoiceFrontSide(item.quantity, item, isEdit, index, isSaveToItemsList);
        } else if (
            (this.pageEnum == this.salesInvoiceEnum && !this.isPriceOffer) ||
            this.pageEnum == this.posInvoiceEnum ||
            (this.pageEnum == this.purchasesInvoiceEnum && isEdit) ||
            (this.pageEnum == this.purchasesInvoiceEnum && this.returnMode)
        ) {
            this.isCheckIfOverQuantity = true;
            //
            //this.setItemsForInvoices()
            this._generalService
                .calculateItemQuantity(this.setCalculateItemQuantityPayload(index, false))
                .subscribe((res: any) => {
                    debugger;
                    item.storeQuantityWithOutInvoice = res.storeQuantityWithOutInvoice;
                    item.invoiceQuantity = res.invoiceQuantity;
                    let quantity = this.quantityHandling(res);
                    this.isCheckIfOverQuantity = false;
                    this.CheckOverQuantityInInvoiceFrontSide(quantity, item, isEdit, index, isSaveToItemsList);
                });
        }
    }
    normalMoodQuantityCheck(quantity, isEdit, item, total) {
        //let currentQuntity = +(+item.quantity + total).toFixed(this.decimals);
        let currentQuntity = +(+item.quantity).toFixed(this.decimals);

        if (this.returnMode) {
            if (this.InvoiceTypeId == this.InComingTransferTypeId)
                this.isOverInvoice = currentQuntity > item.invoiceQuantity;
            //this.isOverInvoice = currentQuntity > quantity;
            else this.isOverInvoice = currentQuntity > item.oldQuantity; // lazem a4of alaa kant btb3t eh lma kan elsanf 3ady w da ta7wel wared
        }
        if (!isEdit) {
            const isIncomingTransfer = this.InvoiceTypeId == this.InComingTransferTypeId;
            console.log(isIncomingTransfer, 'IncomingTransfer');
            if (isIncomingTransfer) {
                this.isItemQuantityNotAvilableInStorInAddMode = currentQuntity <= item.invoiceQuantity;
            } else this.isItemQuantityNotAvilableInStorInAddMode = currentQuntity > quantity;
        } else {
            if (this.returnMode && (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum)) {
                if (this.InvoiceTypeId == this.InComingTransferTypeId) {
                    // this.isItemQuantityNotAvilableInStorInEditMode = currentQuntity > item.copyOfQuantity;
                    this.isItemQuantityNotAvilableInStorInEditMode = currentQuntity > item.invoiceQuantity;
                } else this.isItemQuantityNotAvilableInStorInEditMode = currentQuntity > item.oldQuantity;
            } else this.isItemQuantityNotAvilableInStorInEditMode = currentQuntity > quantity;
            // this.itemCards[index].disUpdatebtn;
        }
    }
    isActiveAnyQuantityCheck(item) {
        return !this.isExchangeWithoutStock || (this.isExchangeWithoutStock && item.itemTypeId != this.storeItemEnum);
    }
    checkIfItemQuantityNotAvilable(item, isEditMode) {
        //1-if overAdd and is add item in sales
        //2-if over edit in sales or return purchases
        //3-if edit purchases and the quantity not available to change
        return (
            (((this.isItemQuantityNotAvilableInStorInAddMode && !isEditMode) ||
                (this.isItemQuantityNotAvilableInStorInEditMode &&
                    isEditMode &&
                    (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum)) ||
                (this.isItemQuantityNotAvilableInStorInEditMode &&
                    this.returnMode &&
                    this.pageEnum == this.purchasesInvoiceEnum)) &&
                this.isActiveAnyQuantityCheck(item)) ||
            (this.isLessThanQuantityOfSales &&
                this.pageEnum == this.purchasesInvoiceEnum &&
                isEditMode &&
                this.isActiveAnyQuantityCheck(item))
        );
    }
    //========================= gets and calling apis =========================

    getQuantityOnRow(index, tooltip?, isShow?) {
        if (!this.itemCards[index].itemId || this.isPriceOffer) return;
        if (this.itemCards[index].itemTypeId == this.serialEnum && !isShow) return;
        if (this.title == 'inventory') return;
        console.log('hereeee');
        //
        this._generalService
            .calculateItemQuantity(this.setCalculateItemQuantityPayload(index, false))
            .subscribe((res: any) => {
                //
                this.itemCards[index].storeQuantityWithOutInvoice = res.storeQuantityWithOutInvoice;
                let Quantity;
                if (tooltip) {
                    //if Return Mode Quantity will be invoice Quantity
                    //debugger
                    Quantity = this.quantityHandling(res);
                    this.OpenTooltip(true, index, Quantity, this.itemCards[index].itemId, isShow);
                }
            });
    }

    async isItemQuantityAvailableInStore(index: number, isDelete: boolean): Promise<boolean> {
        //
        // here we get storQuantity without invoiceQuantity and calculate all item quantity in the invoice
        // then we check if it could be deleted or note
        let { storeQuantityWithOutInvoice } = await this._generalService
            .calculateItemQuantity(this.setCalculateItemQuantityPayload(index, isDelete))
            .toPromise<any>();
        let totalQuantityOfItem = this.calculateAllQuantityOfItems(this.itemCards[index].itemId, index);
        //     if (
        //   storeQuantityWithOutInvoice + totalQuantityOfItem <
        //   this.itemCards[index].quantity
        // )

        if (storeQuantityWithOutInvoice < 0 && storeQuantityWithOutInvoice < this.itemCards[index].quantity)
            return true;
        return false;
    }
    //========================= setting data  ================================
    setCalculateItemQuantityPayload(index, isDelete: boolean) {
        console.log(this.isTaxsPurchasesReturnComponent);

        console.log(this.isTaxsPurchasesReturnComponent);
        console.log(this.isTaxsPurchasesComponent);

        if (this.isTaxsPurchasesComponent) {
            this.InvoiceTypeId = 26;
        }
        if (this.comeFromisTaxsPurchases) {
            this.InvoiceTypeId = 27;
        }
        this.setItemsForInvoices(index);
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        let data = {
            storeId: this.storeId,
            itemId: item.itemId,
            unitId: item.unitId,
            ParentInvoiceType: this.formGroup?.get('invoiceCode').value ? this.formGroup?.get('invoiceCode').value : '',
            invoiceTypeId: this.InvoiceTypeId ? this.InvoiceTypeId : '',
            ExpiryDate: item.itemTypeId == this.expiryDateEnum ? item.expireDate : '',
            invoiceId: this.isCopyMode ? 0 : this.formGroup?.get('invoiceId').value,
            currentQuantity: isDelete ? 0 : item.quantity,
            InvoiceDate: moment(this.formGroup?.get('invoiceDate').value).format('YYYY-MM-DD h:mm:ss'),
            currentItems: this.itemsForCombinationItemType
        };
        return data;
    }
    calculateAllQuantityOfItems(itemId: any, index?: number) {
        let collectAllItems = this.itemCards?.filter(res => res.itemId == itemId);
        let total = 0;
        collectAllItems?.forEach(el => {
            console.log(el, 'el');
            total +=
                (+el.quantity * el.conversionFactor) /
                (index >= 0 ? this.itemCards[index].conversionFactor : this.itemDetails.conversionFactor);
        });
        console.log(total, 'total');
        return total;
    }
    calculateTotalOfAllItemCardsQuantity(item, index): number {
        let total = 0;
        let date = moment(this.formGroup.get('invoiceDate').value).format('YYYY-MM-DD');
        console.log('calculateTotalOfAllItemCardsQuantity', this.itemCards);
        if (this.itemCards?.length > 0) {
            // when item is expiry date >>> get total of all items that the same expiry date
            if (item.itemTypeId == this.expiryDateEnum) {
                this.itemCards.forEach((elm, i) => {
                    console.log('isBefore', moment(date).isSameOrAfter(elm.expireDate));
                    if (
                        (item.expireDate == elm.expireDate && elm.itemId == item.itemId && index != i && index >= 0) ||
                        (elm.itemId == item.itemId && index < 0 && moment(date).isBefore(elm.expireDate))
                    ) {
                        total += (+elm.quantity * elm.conversionFactor) / +item.conversionFactor;
                    }
                });
                // when item is stored >>> get total of all items
            } else {
                this.itemCards.forEach((elm, i) => {
                    if (elm.itemId == item.itemId && i != index) {
                        total += (+elm.quantity * elm.conversionFactor) / +item.conversionFactor;
                    }
                });
            }
        }
        return total;
    }
    isLessThanQuantityOfSales = false;
    isOverInvoice: boolean = false;
    isOverStor: boolean = false;
    returnModePurchasesQuantity(storQuantity, invoiceQuantity, item, total) {
        let currentQuntity = +(+item.quantity + total).toFixed(this.decimals);

        //this.isOverInvoice = currentQuntity > invoiceQuantity;
        this.isOverInvoice = item.quantity > item.oldQuantity;
        this.isOverStor = !this.isReturnWithoutStock ? currentQuntity > storQuantity : false;
        // if (!isEdit) {
        //   this.isItemQuantityNotAvilableInStorInAddMode =
        //     currentQuntity > invoiceQuantity ||
        //     currentQuntity > storQuantity ||
        //     this.isReturnWithoutStock;
        // } else {
        //   this.isItemQuantityNotAvilableInStorInEditMode =
        //     this.isOverInvoice || this.isOverStor;
        // }
    }
    /**************************************************************************************** */
    /********************************* calculation function********************************** */
    /**************************************************************************************** */

    // * previousValueOfEndData and isFirstRequest prevent --> onEndOfScrolling emit one more time
    // add >> true --->  in case user add item or edit item  , false --> user input values in inputs
    //========================= Conditions and Check Functions =========================
    checkIfPersonIsExisted() {
        if (this.isFormWithoutPerson) return false;
        return (
            !this.formGroup?.get('personId')?.value &&
            this.InvoiceTypeId !== this.itemsFundsTypeId &&
            this.InvoiceTypeId !== this.addPermissionTypeId &&
            this.InvoiceTypeId !== this.payPermissionTypeId
        );
    }

    async isNotAbleToCallCalculateSystem(index: number, isEditMode: boolean, isAfterDelete: boolean) {
        //
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        if (this.checkIfItemQuantityNotAvilable(item, isEditMode)) return true;
        this.isSaveUpdatedItem = false;
        // to display expire item alert if item is expired (according to settings)
        // and check if alert is confirmed or not
        if (
            !isAfterDelete &&
            isEditMode &&
            this.itemCards[index]?.itemTypeId == this.expiryDateEnum &&
            !(await this.isAddOrUpdateItemCardExpiredToItemCardsArray(isEditMode, index))
        )
            return true;

        return false;
    }
    //========================= gets and calling apis =========================
    disObject = {
        changed: false,
        isDisableTableDiscount: true
    };

    async calculateTotalsAndDiscoundValue(
        isSaveToItemsList?: boolean,
        isEditMode?,
        index?: number,
        isAfterDelete?: boolean
    ) {
        if (this.title != 'inventory') {
            if (this.checkIfPersonIsExisted()) {
                this.showAddCustomerErrorAlert();
                return;
            }
        }
        if (await this.isNotAbleToCallCalculateSystem(index, isEditMode, isAfterDelete)) {
            return;
        }
        this.preparingCalculationObjectForRequest();
        this.createCalculationObject();
        this._purchaseService.calculateSystem(this.CalculationRequestObj).subscribe(
            res => {
                if (res.data) {
                    if (res.errorMessageAr || res.errorMessageEn) {
                        this.setBackendErrorMessage(res);
                        this.isDisableTableDiscount = false;
                        if ((this.formGroup.get('discountType').value = 2)) {
                            this.formGroup.get('discountType')?.patchValue(0);
                            this.disObject.isDisableTableDiscount = true;
                        } else this.disObject.isDisableTableDiscount = true;
                        this.disObject.changed = false;
                        this.discountValueChanged.emit(this.disObject);
                    }
                    this.onCalculationResponse(res.data, isSaveToItemsList, isEditMode, index, isAfterDelete);
                    if (
                        this.formGroup.get('totalDiscountValue')?.value == 0 &&
                        this.formGroup.get('totalDiscountRatio')?.value == 0 &&
                        this.ActiveDiscount
                    ) {
                        this.disObject.changed = false;
                        this.discountValueChanged.emit(this.disObject);
                    }
                }
                this.isSaveUpdatedItem = true;
            },
            err => {
                console.error(err);
                this.isSaveUpdatedItem = true;
                this.isAddButtonClicked = false;
            }
        );
    }
    //========================= setting data  ================================
    itemDetailsForCalculationRequest = [];
    mapItemCardsListForCalculation() {
        this.itemDetailsForCalculationRequest = this.itemCards.map(elm => {
            return {
                itemTypeId: elm.itemTypeId,
                quantity: elm.quantity,
                price: elm.price,
                discountValue: elm.discountValue ? elm.discountValue : 0,
                discountRatio: elm.discountRatio ? elm.discountRatio : 0,
                applyVat: elm.applyVat,
                vatRatio: elm.vatRatio,
                isBalanceBarcode: elm.isBalanceBarcode,
                isDiscountRatioItem: elm.isDiscountRatioItem
            };
        });
    }
    pushItemDetailsToCalculationObject() {
        this.itemDetailsForCalculationRequest.push({
            itemTypeId: this.itemDetails.itemTypeId,
            quantity: this.itemDetails.quantity,
            price: this.itemDetails.price,
            discountValue: this.itemDetails.discountValue ? this.itemDetails.discountValue : 0,
            discountRatio: this.itemDetails.discountRatio ? this.itemDetails.discountRatio : 0,
            applyVat: this.itemDetails.applyVat,
            vatRatio: this.itemDetails.vatRatio,
            isBalanceBarcode: this.itemDetails.isBalanceBarcode,
            isDiscountRatioItem: this.itemDetails.isDiscountRatioItem
        });
    }
    preparingCalculationObjectForRequest() {
        this.itemDetailsForCalculationRequest = [];

        if (this.itemCards?.length > 0) {
            this.mapItemCardsListForCalculation();
        }
        if (this.itemDetails.itemId && (this.itemDetails.quantity || this.title == 'inventory')) {
            this.pushItemDetailsToCalculationObject();
        }
    }

    isNumeric(value: any) {
        return !isNaN(parseFloat(value)) && isFinite(value);
    }

    isSaveUpdatedItem = true;
    CalculationRequestObj;
    createCalculationObject() {
        if (this.InvoiceTypeId == this.salesInvoiceTypeId || this.InvoiceTypeId == this.priceOfferInvoiceTypeId) {
            this.CalculationRequestObj = {
                itemDetails: this.itemDetailsForCalculationRequest,
                DiscountType: this.discountTotalInput ? 1 : this.isDisableTableDiscount ? 2 : 0,
                personId: this.formGroup?.get('personId')?.value?.id
                    ? this.formGroup?.get('personId')?.value?.id
                    : this.formGroup?.get('personId')?.value,
                TotalDiscountValue: this.formGroup?.get('totalDiscountValue').value
                    ? this.formGroup.get('totalDiscountValue').value
                    : 0,
                TotalDiscountRatio: this.formGroup?.get('totalDiscountRatio').value
                    ? this.formGroup.get('totalDiscountRatio').value
                    : 0,
                // InvoiceTypeId: this.InvoiceTypeId ? this.InvoiceTypeId : '',
                InvoiceTypeId: this.isTaxsPurchasesComponent ? 26 : this.InvoiceTypeId ? this.InvoiceTypeId : '',

                InvoiceId: this.isCopyMode ? 0 : this.formGroup?.get('invoiceId').value,
                ParentInvoice: '',
                isCopy: this.isCopyMode,
                isDiscountRatio: this.formGroup?.get('isDiscountRatio')?.value
                    ? this.formGroup?.get('isDiscountRatio')?.value
                    : false, //elmafrod a5od elqema mn totals
                salesManId: this.formGroup?.get('salesManId').value?.id
                    ? this.formGroup?.get('salesManId').value?.id
                    : this.formGroup?.get('salesManId').value,
                priceListId: this.formGroup?.get('priceListId').value ? this.formGroup.get('priceListId').value : 0
            };
        } else {
            this.CalculationRequestObj = {
                itemDetails: this.itemDetailsForCalculationRequest,
                DiscountType: this.discountTotalInput ? 1 : this.isDisableTableDiscount ? 2 : 0,
                personId: this.formGroup?.get('personId')?.value?.id
                    ? this.formGroup?.get('personId')?.value?.id
                    : this.formGroup?.get('personId')?.value,
                TotalDiscountValue: this.formGroup?.get('totalDiscountValue')?.value
                    ? this.formGroup.get('totalDiscountValue')?.value
                    : 0,
                TotalDiscountRatio: this.formGroup?.get('totalDiscountRatio')?.value
                    ? this.formGroup.get('totalDiscountRatio')?.value
                    : 0,
                // InvoiceTypeId: this.InvoiceTypeId ? this.InvoiceTypeId : '',
                InvoiceTypeId: this.isTaxsPurchasesComponent ? 26 : this.InvoiceTypeId ? this.InvoiceTypeId : '',

                InvoiceId: this.isCopyMode ? 0 : this.formGroup?.get('invoiceId').value,
                ParentInvoice: '',
                isCopy: this.isCopyMode,
                isDiscountRatio: this.formGroup?.get('isDiscountRatio')?.value
                    ? this.formGroup?.get('isDiscountRatio')?.value
                    : false //elmafrod a5od elqema mn totals
            };
        }
    }
    returnItemCardInAddOrEditMode(index: number, isEdit: boolean) {
        let itemCard: any;
        if (isEdit) itemCard = this.itemCards[index];
        else {
            itemCard = this.itemDetails;
            itemCard.expireDate = '';
        }
        return itemCard;
    }

    handelDiscoundTypeSettingToItemList(responseData, index: number, isEdit: boolean) {
        let itemCard = isEdit ? this.itemCards[index] : this.itemDetails;
        if (this.CalculationRequestObj.DiscountType == 2) {
            itemCard.splitedDiscountRatio = responseData[index]?.splitedDiscountRatio;
            itemCard.splitedDiscountValue = responseData[index]?.splitedDiscountValue;
        } else {
            itemCard.discountRatio = responseData[index]?.discountRatio;
            itemCard.discountValue = responseData[index]?.discountValue;
        }
    }
    setTotalAndVatValueFromCalculation(responseData, index: number, isEdit: boolean) {
        let itemCard = isEdit ? this.itemCards[index] : this.itemDetails;
        itemCard.total = responseData[index]?.itemTotal;
        itemCard.vatValue = responseData[index]?.vatValue;
    }

    callFunctionsDependOnCurrentStage(isSaveToItemsList: boolean, index: number, isEdit: boolean) {
        let itemCard = isEdit ? this.itemCards[index] : this.itemDetails;
        console.log('hereee1', itemCard);
        if (isSaveToItemsList) {
            if (
                itemCard.itemTypeId == this.noteEnum ||
                itemCard.itemTypeId == this.serviceEnum ||
                (this.pageEnum == this.purchasesInvoiceEnum && !this.returnMode) ||
                (this.pageEnum == this.purchasesInvoiceEnum && !this.isEditMode) ||
                this.pageEnum == this.salesInvoiceEnum ||
                this.pageEnum == this.posInvoiceEnum
            )
                this.callAddItemsOrUpdate(index, isEdit);
        } else {
            this.CheckIfOverQuantity(itemCard, isEdit, isEdit ? index : this.notFoundIndex, isSaveToItemsList);
        }
    }

    callAddItemsOrUpdate(index: Number, isEdit: boolean) {
        console.log('Call add');

        if (isEdit) this.updateItemRow(index);
        else this.checkItemIfAvilableToUnShiftItemsToItemsDetails();
    }

    calculationResponseHandling(responseData, index: number, isEditMode: boolean, isSaveToItemsList: boolean) {
        let indexOfItemInResponse = index;
        if (!isEditMode) {
            indexOfItemInResponse =
                responseData?.itemsTotalList.length <= 0 ? 0 : responseData?.itemsTotalList.length - 1;
        }
        this.setTotalAndVatValueFromCalculation(responseData?.itemsTotalList, indexOfItemInResponse, isEditMode);
        this.handelDiscoundTypeSettingToItemList(responseData?.itemsTotalList, indexOfItemInResponse, isEditMode);
        this.callFunctionsDependOnCurrentStage(isSaveToItemsList, indexOfItemInResponse, isEditMode);
    }
    onCalculationResponse(
        responseData,
        isSaveToItemsList?: boolean,
        isEditMode?,
        index?: number,
        isAfterDelete?: boolean
    ) {
        this.calculationResponse = responseData;
        if (isAfterDelete) {
            this.OnCalculateReq(responseData);
            // this.resetItemDetailsObject();
            this.resetItemCardArrayAndCurrentMode();
        } else {
            this.calculationResponseHandling(responseData, index, isEditMode, isSaveToItemsList);
            if (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum)
                this.isItemCardsArrayHaveExpireDate();
            if (!this.itemDetails.itemId) {
                this.resetItemDetailsObject();
            }
        }
    }
    /**************************************************************************************** */
    /*********************************** Price Change check ********************************* */
    /**************************************************************************************** */

    isValidPrice: number = 1;
    checkItemPricePayload(isEditMode?: boolean, index?: number) {
        let item = isEditMode ? this.itemCards[index] : this.itemDetails;
        console.log(item);
        return {
            itemId: item.itemId,
            unitId: item.unitId,
            price: item.price,
            invoiceTypeId: this.InvoiceTypeId,
            personId: this.formGroup?.get('personId')?.value?.id
                ? this.formGroup?.get('personId')?.value?.id
                : this.formGroup?.get('personId')?.value || 0,
            priceListId: this.formGroup?.get('priceListId')?.value ? this.formGroup?.get('priceListId')?.value : 0,
            salesManId: this.formGroup?.get('salesManId')?.value.id ? this.formGroup?.get('salesManId')?.value.id : 0
        };
    }
    checkIfNotSalesOrPurchase() {
        return (
            this.InvoiceTypeId === this.itemsFundsTypeId ||
            this.InvoiceTypeId === this.addPermissionTypeId ||
            this.InvoiceTypeId === this.payPermissionTypeId ||
            this.InvoiceTypeId === 49
        ); // Inventory Type ID;
    }

    checkRowChange(index: number): boolean {
        if (this.itemCards[index].Item.code !== this.SavedObject.Item.code) return true;
        if (this.itemCards[index].quantity !== this.SavedObject.quantity) return true;
        if (this.itemCards[index].price !== this.SavedObject.price) return true;
        if (this.itemCards[index].unitId !== this.SavedObject.unitId) return true;
        if (this.itemCards[index].discountValue !== this.SavedObject.discountValue) return true;
        if (this.itemCards[index].discountRatio !== this.SavedObject.discountRatio) return true;
        return false;
    }

    CheckItemAvailability(isSaveToItemsList?: boolean, isEditMode?: boolean, index?: number) {
        debugger;
        if (index >= 0 && this.title != 'inventory')
            if (isEditMode && !this.checkRowChange(index)) {
                this.cancelEditing(index);
                return;
            }
        //if ((this.isAddButtonClicked && (!this.itemDetails.quantity || this.itemDetails.price == 0 || this.itemDetails.quantity == 0) && !isEditMode ) ||(isEditMode &&( this.itemCards[index].quantity == 0 ||this.itemCards[index].price == 0  )) )
        if (this.title != 'inventory') {
            if (
                this.itemDetails['quantity'] &&
                this.itemDetails['price'] == 0 &&
                !this.other_ShowPriceAndTotalInOutgoingAndIncommingTransfer &&
                this.title == 'outgoingTransfer'
            )
                this.SetAlertMessage(
                    this.translate.currentLang === 'ar' ? 'السعر لا يمكن ان يكون صفر' : ' Price can not be zero'
                );
            if (
                ((!this.itemDetails.quantity || this.itemDetails.price == 0 || this.itemDetails.quantity == 0) &&
                    !isEditMode) ||
                (isEditMode &&
                    (this.itemCards[index].quantity == 0 || this.itemCards[index].price == 0) &&
                    this.InvoiceTypeId != this.InComingTransferTypeId)
            ) {
                return;
            }
        }
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        // this.addItemsInput.nativeElement.disabled = true
        if (isSaveToItemsList) this.isAddButtonClicked = true;
        if (item.itemTypeId == this.serviceEnum) this.isItemQuantityNotAvilableInStorInAddMode = false;

        if (
            item.itemTypeId != this.serviceEnum &&
            (this.pageEnum == this.salesInvoiceEnum || isEditMode || this.returnMode) &&
            !this.isPriceOffer
        ) {
            if (
                this.pageEnum == this.salesInvoiceEnum &&
                (this.InvoiceTypeId == this.ReturnPosWithoutInvoice ||
                    this.InvoiceTypeId == this.ReturnSalesWithoutInvoice) &&
                this.formGroup?.controls.invoiceId.value == ''
            ){
            this.checkPriceChangeAvailability(isEditMode, index);

            }
            else{
                if(this.itemDetails.itemTypeId == 5){
                    console.log(this.itemCards,"===>collection data")
                    alert("collection item ");
  this.openCollectionSerialItemSales()
                    this.CheckIfOverQuantity(item, isEditMode, index, isSaveToItemsList);
                }
                 this.CheckIfOverQuantity(item, isEditMode, index, isSaveToItemsList);

                }
        }

        else {
            this.checkPriceChangeAvailability(isEditMode, index);
        }
        //this.isAddButtonClicked = false

    }

    checkPriceChangeAvailability(isEditMode?: boolean, index?: number) {
        //  if (!this.isAddButtonClicked) {

        this.isValidPrice = 0;
        if (this.checkIfNotSalesOrPurchase() || !this.ActivechangePrice) {
            this.calculateTotalsAndDiscoundValue(true, isEditMode, index);
            this.isValidPrice = 1;
            return false;
        }

        //
        if (this.ModifyPricesType == 3) {
            this.isValidPrice = 1;
            this.calculateTotalsAndDiscoundValue(true, isEditMode, index);
        } else console.log(this.checkItemPricePayload(isEditMode, index), 'checkItem');

        this._purchaseService.checkItemPrice(this.checkItemPricePayload(isEditMode, index)).subscribe(
            res => {
                //
                this.isValidPrice = res.result;
                if (res.result == 1) {
                    this.calculateTotalsAndDiscoundValue(true, isEditMode, index);
                } else {
                    this.setBackendErrorMessage(res);
                }
            },
            err => {
                //
                console.error(err);
            }
        );
        // }
        return this.isValidPrice;
    }
    /**************************************************************************************** */
    /***************************** calculate Quantity For tooltip *************************** */
    /**************************************************************************************** */

    calcQuantityForTooltipExpiryDate(quantityInStoreWithoutInvoice, totalItemById, totalItem, isEdit, signal, item) {
        let toolQuantity;
        if (this.pageEnum == this.purchasesInvoiceEnum && this.returnMode) {
            let str1 = quantityInStoreWithoutInvoice.storQuantity;
            let str2 = quantityInStoreWithoutInvoice.invoiceQuantity;
            toolQuantity =
                this.translate.instant('item-quantity-inStor') +
                ' ' +
                str1.toFixed(this.decimals) +
                ' /' +
                this.translate.instant('item-quantity-inInvoice') +
                ' ' +
                str2.toFixed(this.decimals);
        } else {
            toolQuantity =
                (isEdit
                    ? this.translate.instant('item-quantity-inStor-date')
                    : this.translate.instant('item-quantity-inStor')) + quantityInStoreWithoutInvoice;
        }

        // else if (this.returnMode) {
        //   let SerialsString;
        //   SerialsString = quantityInStoreWithoutInvoice - +item.quantity;
        //   toolQuantity =
        //     this.translate.instant('item-quantity') +
        //     SerialsString.toFixed(this.decimals);
        // } else {
        //   let SerialsString = +totalItem + +item.quantity;
        //   if (!isEdit) {
        //     SerialsString = quantityInStoreWithoutInvoice + signal * +totalItem;
        //   } else {
        //     SerialsString = quantityInStoreWithoutInvoice + signal * +SerialsString;
        //   }
        // }
        return toolQuantity;
    }
    calcQuantityForTooltipSerialItem(item) {
        let SerialsString = '';
        if (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum) {
            SerialsString = item.listSerials.join('-');
        }
        // to display tooltip when item is serial in purchases
        else {
            item.invoiceSerialDtos.forEach((element, i) => {
                SerialsString += (item.listSerials.length == i ? ' ' : ' - ') + element.serialNumber;
                // SerialsString += element;
            });
        }
        return SerialsString;
    }
    calcQuantityForTooltipStorItem(signal, quantityInStore, totalItemById: number, item) {
        let tooltipQuantityString = '';
        if (this.pageEnum == this.purchasesInvoiceEnum && this.returnMode) {
            tooltipQuantityString =
                this.translate.instant('item-quantity-inStor') +
                (signal * quantityInStore.storQuantity).toFixed(this.decimals);

            // tooltipQuantityString +=
            //   this.translate.instant('item-quantity-inInvoice') +
            //   (signal * quantityInStore.invoiceQuantity).toFixed(this.decimals);

            tooltipQuantityString +=
                this.translate.instant('item-quantity-inInvoice') + item.oldQuantity.toFixed(this.decimals);
        } else if (this.returnMode) {
            // tooltipQuantityString =
            //   this.translate.instant('item-quantity-inInvoice') +
            //   quantityInStore.toFixed(this.decimals);
            tooltipQuantityString =
                this.translate.instant('item-quantity-inInvoice') + item.oldQuantity.toFixed(this.decimals);
        } else {
            tooltipQuantityString = this.translate.instant('item-quantity') + quantityInStore.toFixed(this.decimals);
            //(quantityInStore + signal * +totalItemById).toFixed(this.decimals);
        }
        return tooltipQuantityString;
    }
    CalculateItemQuantityForTooltip(isEdit, index, quantityInStore?, itemId?, item?) {
        //
        let signal = this.isDecreaseQuantity && !this.returnMode ? -1 : 1;
        let toolQuantity = '';

        let totalItem = +this.calculateTotalOfAllItemCardsQuantity(item, index).toFixed(this.decimals);
        let totalItemById = +this.calculateAllQuantityOfItems(itemId, index).toFixed(this.decimals);

        //  && item.listSerials
        if (item?.itemTypeId == this.serialEnum) {
            toolQuantity = this.calcQuantityForTooltipSerialItem(item);
            //in case returnMode in purchases Or not auto set expire date
        } else if (item?.itemTypeId == this.expiryDateEnum) {
            toolQuantity = this.calcQuantityForTooltipExpiryDate(
                quantityInStore,
                totalItemById,
                totalItem,
                isEdit,
                signal,
                item
            );
        } else {
            toolQuantity = this.calcQuantityForTooltipStorItem(signal, quantityInStore, +totalItemById, item);
        }
        return toolQuantity;
    }
    editTooltipValue = '';
    OpenTooltip(isEdit, index, quantityInStore?, itemId?, isShow?) {
        let item = isEdit ? this.itemCards[index] : this.itemDetails;
        // if (item.itemTypeId == this.expiryDateEnum && (this.pageEnum == this.purchasesInvoiceEnum || this.pageEnum == this.salesInvoiceEnum) && this.returnMode) return;
        if (this.isParentQuantityCheck) return;
        // if (item.itemTypeId == this.compositeEnum) return;
        if (!item.itemId) return;
        // if (this.title == 'inventory') return;
        let toolQuantity = this.CalculateItemQuantityForTooltip(isEdit, index, quantityInStore, itemId, item);
        if (isEdit && isShow) {
            item.toolQuantity = toolQuantity;
        } else if (isEdit && toolQuantity) {
            this.editQuantityTooltip.ngbTooltip = toolQuantity;
            this.editQuantityTooltip.open();
        } else if (toolQuantity) {
            this.quantityTooltip.ngbTooltip = toolQuantity;
            this.quantityTooltip.open();
            // this.focusInNext("partQuantityInAddMode")
        }
    }
    /**************************************************************************************** */
    //********************** Total Discound changing availability *************************** */
    /**************************************************************************************** */

    isDisValue: boolean = false;
    isDisRatio: boolean = false;

    disableTotalDis(elementName: string, index?: number) {
        console.log(elementName, index);

        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        if (item.discountRatio == null || item.discountValue == null) return;
        if (+item.discountRatio != 0 || +item.discountValue != 0) {
            this.discountTotalInput = true;
            this.disObject.changed = true;
            this.disObject.isDisableTableDiscount = true;
            this.discountValueChanged.emit(this.disObject);
        } else if (!this.isEditMode) {
            this.discountTotalInput = false;
            this.disObject.changed = false;
            this.disObject.isDisableTableDiscount = true;
            this.discountValueChanged.emit(this.disObject);
        }

        if (!this.isNumeric(item.discountValue)) item.discountValue = 0;
        else if (!this.isNumeric(item.discountRatio)) item.discountRatio = 0;
        //cases of Discount value
        //when write in discount value
        if (
            (elementName == 'addDisValue' || elementName == 'editDisValue') &&
            +item.discountValue > 0 &&
            !this.isDisValue
        ) {
            this.isDisValue = true;
            item.isDiscountRatioItem = false;
        }
        //when write in discount value but value = 0
        else if (
            (elementName == 'addDisValue' || elementName == 'editDisValue') &&
            +item.discountValue <= 0 &&
            this.isDisValue
        ) {
            this.isDisValue = false;
            item.isDiscountRatioItem = false;
        }
        //cases of Discount ratio
        //when write in discount ratio
        else if (
            (elementName == 'addDisRatio' || elementName == 'editDisRatio') &&
            +item.discountRatio > 0 &&
            !this.isDisRatio
        ) {
            this.isDisRatio = true;
            item.isDiscountRatioItem = true;
        }
        //when write in discount ratio but value = 0
        else if (
            (elementName == 'addDisRatio' || elementName == 'editDisRatio') &&
            +item.discountRatio <= 0 &&
            this.isDisRatio
        ) {
            this.isDisRatio = false;
            item.isDiscountRatioItem = false;
        }

        //debugger
        //item.isDiscountRatioItem = this.isDisRatio;
    }
    /**************************************************************************************** */
    //****************************** Actions On item (Add , UpDate and Delete)*************** */
    /**************************************************************************************** */

    //========================= Conditions and Check Functions =========================

    checkTableFormRequiredItemsExist() {
        return (
            ((!this.itemDetails.unitId ||
                !this.itemDetails.itemCode ||
                ((!this.itemDetails.quantity || this.itemDetails.quantity == 0) && this.title != 'inventory') ||
                (this.itemDetails.price == 0 && this.title != 'inventory')) &&
                this.itemDetails.itemTypeId != this.noteEnum) ||
            this.isValidPrice != 1
        );
    }
    checkIfItemIsServiceORNote() {
        return (
            this.itemDetails.itemTypeId == this.expiryDateEnum ||
            this.itemDetails.itemTypeId == this.serialEnum ||
            this.itemDetails.itemTypeId == this.storeItemEnum
        );
    }
    checkIfTheQuantityOfItemIsMoreThanStoreQuantity() {
        return (
            (this.pageEnum == this.salesInvoiceEnum ||
                this.pageEnum == this.posInvoiceEnum ||
                this.isEditMode ||
                this.returnMode) &&
            this.isItemQuantityNotAvilableInStorInAddMode &&
            (!this.isExchangeWithoutStock || (this.isExchangeWithoutStock && this.itemDetails.itemTypeId != 1))
        );
    }
    checkIfTheQuantityOfItemIsMoreThanStoreQuantityForEdit(item) {
        console.log(
            (this.pageEnum == this.salesInvoiceEnum ||
                this.pageEnum == this.posInvoiceEnum ||
                this.isEditMode ||
                this.returnMode) &&
                this.isItemQuantityNotAvilableInStorInEditMode &&
                (!this.isExchangeWithoutStock || (this.isExchangeWithoutStock && item.itemTypeId != 1)),
            'cheack'
        );

        let test =
            (this.pageEnum == this.salesInvoiceEnum ||
                this.pageEnum == this.posInvoiceEnum ||
                this.isEditMode ||
                this.returnMode) &&
            this.isItemQuantityNotAvilableInStorInEditMode &&
            (!this.isExchangeWithoutStock || (this.isExchangeWithoutStock && item.itemTypeId != 1));
        return test;
    }
    checkIfExpireDateForExpireItemIsExist() {
        return (
            this.itemDetails.itemTypeId == this.expiryDateEnum &&
            ((!this.itemDetails.expireDate &&
                (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum)) ||
                (!this.dateForm.controls.expireDateInAddMode.value && this.pageEnum == this.purchasesInvoiceEnum))
        );
    }
    async checkItemIfAvilableToUnShiftItemsToItemsDetails() {
        console.log('checkItemIfAvilableToUnShiftItemsToItemsDetails');

        if (this.itemCards.length >= 200) {
            this.SetAlertMessage('max-number-is200');
            this.isAddButtonClicked = false;
            return;
        }

        if (this.checkTableFormRequiredItemsExist()) return;

        if (this.checkIfItemIsServiceORNote() && !this.isPriceOffer) {
            if (this.checkIfTheQuantityOfItemIsMoreThanStoreQuantity()) {
                this.SetAlertMessage();
                this.isAddButtonClicked = false;
                return;
            }
            if (this.itemDetails.itemTypeId == this.expiryDateEnum && this.isAutomatedExpirationDate) {
                // logic for call SetQuantityForExpiaryDate api ---> in add new Row
                this.autoSetItemCardsDetailsOfExpireDateItem(this.itemDetails);
                return;
            }
            if (this.checkIfExpireDateForExpireItemIsExist()) {
                this.SetAlertMessage('should-enter-date');
                this.isAddButtonClicked = false;
                return;
            }
            // to set value
            if (this.pageEnum == this.purchasesInvoiceEnum && this.itemDetails.itemTypeId === this.expiryDateEnum) {
                this.itemDetails.expireDate = this.dateForm.controls.expireDateInAddMode.value;
                // to display expire item alert if item is expired (according to settings)
                // and check if alert is confirmed or not
                if (!(await this.isAddOrUpdateItemCardExpiredToItemCardsArray(false))) return;
                this.isExpireItemAdded = true;
                this.isAddButtonClicked = false;
            }
        }
        this.unshiftItemDetailsToItemCards();
    }
    isSerialItemTypeId(index: number) {
        if (this.itemCards[index].itemTypeId === this.serialEnum) return true;
        return false;
    }
    isNoteOrServiceItemTypeId(index: number): boolean {
        if (this.itemCards[index].itemTypeId === this.noteEnum || this.itemCards[index].itemTypeId === this.serviceEnum)
            return true;
        return false;
    }
    //========================= pushing,removing and update array data and emit to parents =========================
    unshiftItemDetailsToItemCards() {
        this.itemCards?.unshift(this.itemDetails);
        // this.isDisabledAddButtonForExpiryItem  = false
        if (this.itemDetails.itemTypeId != this.noteEnum) this.OnCalculateReq(this.calculationResponse);
        this.goToFirstPage();
        this.copyOfArray.unshift(JSON.stringify(this.itemDetails));
        this.isAddButtonClicked = false;
        this.resetItemDetailsObject();
        this.addInvoicesDetails.emit(this.itemCards);
        this.quantityTooltip.ngbTooltip = '';
        this.setDefualtOfDisVariable();
        blur();
    }
    SavedObject;
    OnUpdateItem(i) {
        if (!this.itemCards[i].canEdit) return;
        console.log(this.getQuantityObj, this.displayedItems);
        console.log(this.InvoiceTypeId !== this.InComingTransferTypeId, !this.isAvailableQuantity);

        this.getQuantityObj.UnitId = this.itemCards[i].unitId;

        this.SavedObject = Object.assign({}, this.itemCards[i]);
        this.itemCards.forEach((elm, index) => {
            elm.canEdit = false;
            elm.editable = false;
            elm.canDelete = false;
        });

        if (!this.isDisableTableDiscount) {
            if (this.itemCards[i].isDiscountRatioItem) {
                this.isDisRatio = true;
                this.isDisValue = false;
            } else if (!this.itemCards[i].isDiscountRatioItem && this.itemCards[i].discountValue > 0) {
                this.isDisRatio = false;
                this.isDisValue = true;
            } else {
                this.isDisRatio = false;
                this.isDisValue = false;
            }
        }

        this.itemCards[i].editable = true;
        this.itemCards[i].canEdit = true;
        this.tableIsUpdated = true;
        this.onTableIsUpdated.emit(this.tableIsUpdated);
        if (this.itemCards[i].itemTypeId !== this.expiryDateEnum) {
            this.isExpireItemAdded = true;
        }
        if (this.returnMode) {
            this.getUnitsDropdownForItem(this.itemCards[i].itemId, true, i);
        }
    }
    updateItemRow(i) {
        if (
            this.itemCards[i].itemTypeId == this.expiryDateEnum &&
            this.isAutomatedExpirationDate &&
            !this.isPriceOffer &&
            (this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum)
        ) {
            this.autoSetItemCardsDetailsOfExpireDateItem(this.itemCards[i], i);
            return;
        }
        if (
            this.itemCards[i].itemTypeId == this.expiryDateEnum &&
            !this.itemCards[i].expireDate &&
            !this.isPriceOffer
        ) {
            this.SetAlertMessage('should-enter-date');
            this.isAddButtonClicked = false;
            return;
        }
        if (this.checkIfTheQuantityOfItemIsMoreThanStoreQuantityForEdit(this.itemCards[i]) && !this.isPriceOffer) {
            this.SetAlertMessage();
            this.isAddButtonClicked = false;
            return;
        }
        if (this.isValidPrice != 1) {
            return;
        }

        this.isAddButtonClicked = false;
        this.itemCards.forEach((elm, index) => {
            elm.editable = false;
            elm.canEdit = true;
            elm.canDelete = true;
            elm.deleteMode = false;
        });
        this.tableIsUpdated = false;
        this.onTableIsUpdated.emit(this.tableIsUpdated);
        this.addInvoicesDetails.emit(this.itemCards);
        this.setDefualtOfDisVariable();
        this.OnCalculateReq(this.calculationResponse);
        this.copyOfArray[i] = JSON.stringify(this.itemCards[i]);
    }

    setDefualtOfDisVariable() {
        if (!this.isDisableTableDiscount) {
            this.isDisRatio = false;
            this.isDisValue = false;
        }
    }

    cancelEditing(i) {
        // سيريال

        if (this.oldSaledSerials.length > 0) this.SavedObject.listSerials = this.oldSaledSerials;
        if (this.oldAvailableSerials && this.storedSerialOfItems) {
            let indexSerialItem = this.getIndexOfExistSerialItemInTable(this.SavedObject.itemId);
            if (indexSerialItem > this.notFoundIndex)
                this.storedSerialOfItems[indexSerialItem].storedSerials = this.oldAvailableSerials;
        }
        this.itemCards[i] = this.SavedObject;
        //this.calculateTotalsAndDiscoundValue(false, true, i);
        this.isItemCardsArrayHaveExpireDate();
        this.itemCards.forEach((elm, index) => {
            elm.editable = false;
            elm.deleteMode = false;
            elm.canEdit = true;
            elm.canDelete = true;
        });
        this.pushElementsArray();
        this.tableIsUpdated = false;
        this.onTableIsUpdated.emit(this.tableIsUpdated);
        this.setDefualtOfDisVariable();
    }
    // سيريال
    getIndexOfExistSerialItemInTable(itemId): number {
        debugger;
        let indexSerials = this.storedSerialOfItems.findIndex(element => element['id'] == itemId);
        return indexSerials;
    }

    deletedSerialsFromInvoiceTable: {
        serialItemId: number;
        serial: string[];
    }[] = [
        {
            serialItemId: 0,
            serial: ['']
        }
    ];

    checkIndexAndSetSerials(
        itemId: string,
        listSerials: [],
        checkUsedSerials: boolean,
        serialsNotInStoredSerialOfItems,
        myArray,
        colItemID: string,
        colSerials: string
    ) {
        if (!listSerials) return;
        let indexOfExistSerialItem = this.getIndexOfExistSerialItemInTable2(itemId, myArray, colItemID);
        if (indexOfExistSerialItem !== this.notFoundIndex) {
            this.pushNewSerialsInStoredSerials2(
                listSerials,
                indexOfExistSerialItem,
                false,
                '',
                myArray,
                colItemID,
                colSerials
            );
            //check if serials in storedSerialOfItems array or not to set serials(this.itemCards[index].listSerials)
        } else this.pushSerialsAndIdInStoredSerialOfItems2(itemId, listSerials, myArray, colItemID, colSerials);
    }

    getIndexOfExistSerialItemInTable2(itemId, myArray, colItemID: string): number {
        let indexSerials = myArray.findIndex(element => element[colItemID] == itemId);
        return indexSerials;
    }

    pushNewSerialsInStoredSerials2(
        data,
        indexOfExistSerialItem: number,
        checkUsedSerials: boolean,
        serialsNotInStoredSerialOfItems,
        myArray: {},
        colItemID: string,
        colSerials: string
    ) {
        //
        let arrayToPushSerials = myArray[indexOfExistSerialItem][colSerials];
        for (let i = 0; i < data?.length; i++) {
            if (this.isExistedSerial(indexOfExistSerialItem, data, i)) {
                if (checkUsedSerials) {
                    arrayToPushSerials = serialsNotInStoredSerialOfItems;
                    if (this.usedSerials.indexOf(data[i]) !== this.notFoundIndex) return;
                }
                this.pushNewSerial(arrayToPushSerials, data[i]);
            }
        }
    }

    pushSerialsAndIdInStoredSerialOfItems2(
        itemId: string,
        serials: string[],
        myArray,
        colItemID: string,
        colSerials: string
    ) {
        //
        myArray.push({
            [colItemID]: itemId,
            [colSerials]: [...serials]
        });
    }

    // -1 --> this item not found in array
    notFoundIndex = -1;
    async deleteItem(index) {
        // جديد
        // in edit mode when delete item card must be check on quantity in store before deleting if..
        //quantity in store >= quantity in invoice >>> delete it else >>> can not deleting

        if (
            ((this.pageEnum == this.purchasesInvoiceEnum && !this.isNoteOrServiceItemTypeId(index)) ||
                ((this.pageEnum == this.salesInvoiceEnum || this.pageEnum == this.posInvoiceEnum) &&
                    this.isSerialItemTypeId(index))) &&
            this.isEditMode &&
            this.itemCards[index].itemTypeId !== this.serialEnum &&
            (await this.isItemQuantityAvailableInStore(index, true)) &&
            (!this.isExchangeWithoutStock ||
                (this.isExchangeWithoutStock && this.itemCards[index].itemTypeId != this.storeItemEnum))
        ) {
            this.SetAlertMessage();
            this.itemCards[index].editable = false;
            this.itemCards[index].deleteMode = false;
            return;
        }

        //
        // سيريال
        // let indexOfExistSerialItem = this.getIndexOfExistSerialItemInTable( this.itemCards[index].itemId)
        // if (indexOfExistSerialItem !== this.notFoundIndex) {
        // this.pushNewSerialsInStoredSerials(this.itemCards[index].listSerials, indexOfExistSerialItem, false, '')
        //   //check if serials in storedSerialOfItems array or not to set serials(this.itemCards[index].listSerials)
        //  }
        // else
        // this.pushSerialsAndIdInStoredSerialOfItems( this.itemCards[index].itemId, this.itemCards[index].listSerials)

        //check if serials in storedSerialOfItems array or not to set serials(this.itemCards[index].listSerials)
        this.checkIndexAndSetSerials(
            this.itemCards[index].itemId,
            this.itemCards[index].listSerials,
            false,
            '',
            this.storedSerialOfItems,
            'id',
            'storedSerials'
        );
        //insert all serials in this row in allDeletedSerialsInInvoiceForPurchase
        //
        this.checkIndexAndSetSerials(
            this.itemCards[index].itemId,
            this.itemCards[index].listSerials,
            false,
            '',
            this.allDeletedSerialsInInvoiceForPurchase,
            'itemCode',
            'serials'
        );

        // if (this.storedSerialOfItems){
        //   this.storedSerialOfItems.map((s) => {
        //     this.allDeletedSerialsInInvoiceForPurchase.push({
        //       itemCode: s.id,
        //       serials: s.storedSerials,
        //     });
        //   });
        // }

        this.itemCards.splice(index, 1);
        this.oldAvailableSerials = [];
        this.calculateNumberOfPages();
        // this.copyOfArray.splice(index, 1);
        this.isAddButtonClicked = false;
        this.calculateTotalsAndDiscoundValue(false, true, index, true);
        this.addInvoicesDetails.emit(this.itemCards);

        console.log(this.formGroup?.get('isDiscountRatio')?.value);
        if (
            !this.formGroup?.get('isDiscountRatio')?.value &&
            (this.formGroup?.get('totalDiscountRatio')?.value == 0 ||
                this.formGroup?.get('totalDiscountValue')?.value == 0)
        ) {
            this.disObject.changed =
                this.itemCards.filter(item => {
                    return +item.discountValue != 0 || +item.discountRatio != 0;
                }).length != 0;
            this.disObject.isDisableTableDiscount = true;
            this.discountValueChanged.emit(this.disObject);
        }
        // جديد
        // to hide expire date column if table array have not expire item
        this.isItemCardsArrayHaveExpireDate();
        this.setDefualtOfDisVariable();
    }

    isExistedSerial(indexOfExistSerialItem, data, loopIndex: number): boolean {
        return (
            this.storedSerialOfItems[indexOfExistSerialItem].storedSerials.indexOf(data[loopIndex]) ===
            this.notFoundIndex
        );
    }

    pushNewSerial(data: string[], serial: string) {
        data.push(serial);
    }

    pushSerialsAndIdInStoredSerialOfItems(itemId: string, serials: string[]) {
        //
        this.storedSerialOfItems.push({
            id: itemId,
            storedSerials: [...serials]
        });
    }

    pushNewSerialsInStoredSerials(
        data,
        indexOfExistSerialItem: number,
        checkUsedSerials: boolean,
        serialsNotInStoredSerialOfItems
    ) {
        //
        let arrayToPushSerials = this.storedSerialOfItems[indexOfExistSerialItem].storedSerials;
        for (let i = 0; i < data?.length; i++) {
            if (this.isExistedSerial(indexOfExistSerialItem, data, i)) {
                if (checkUsedSerials) {
                    arrayToPushSerials = serialsNotInStoredSerialOfItems;
                    if (this.usedSerials.indexOf(data[i]) !== this.notFoundIndex) return;
                }
                this.pushNewSerial(arrayToPushSerials, data[i]);
            }
        }
    }

    autoSetItemCardsDetailsOfExpireDateItem(item, index?: number) {
        if (this.isDisabledAddButtonForExpiryItem) return;
        this.isDisabledAddButtonForExpiryItem = true;

        let copyOfCurrentItem = Object.assign({}, item);
        this._generalService
            .SetQuantityForExpiaryDate(this.preparePayLoadForAutoSetExpireItemData(item, index))
            .subscribe((res: any) => {
                if (res.result == 21) {
                    this.SetAlertMessage();
                    this.isDisabledAddButtonForExpiryItem = false;
                    return;
                } else if (res.result == 1) {
                    this.SetQuantityForExpiryDateResponse(res, copyOfCurrentItem, index);
                    this.resetItemCardArrayAndCurrentMode();
                } else if (res.result == 8) {
                    this.SetAlertMessage();
                    if (index >= 0) {
                        this.isItemQuantityNotAvilableInStorInEditMode = true;
                    } else {
                        this.isItemQuantityNotAvilableInStorInAddMode = true;
                    }
                } else {
                    this.SetAlertMessage('update-failed');
                }
                this.isDisabledAddButtonForExpiryItem = false;
            });
    }
    /**************************************************************************************** */
    //****************************** Modals Serial and Expire ******************************* */
    /**************************************************************************************** */
    //========================= Modals data preparing =========================
    usedSerials;
    getUsedSerials() {
        debugger;
        this.usedSerials = [];
        console.log( this.itemCards)
        this.usedSerials = [...this.itemDetails.listSerials];
        this.itemCards.forEach(el => {
            if (el.listSerials) {
                el.listSerials.forEach(element => {
                    this.usedSerials.push(element);
                });
            }
        });
    }
    // سيريال
    storedSerialOfItems: {
        id: string;
        storedSerials: string[];
    }[] = [
        {
            id: '',
            storedSerials: []
        }
    ];

    allDeletedSerialsInInvoiceForPurchase: {
        itemCode: string;
        serials: string[];
    }[] = [
        {
            itemCode: '',
            serials: []
        }
    ];

    public isClosedWithSubmit = false;

    SerialItemsDialogData(index) {
        debugger;
        //if (!this.usedSerials)
        this.getUsedSerials(); //call this here because incoming transfer not call fillitem
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        let serials = this.returnMode ? item.newStoredSerials : item.existedSerials ? item.existedSerials : [];
        // let serials
        // if (!this.storedSerialOfItems){
        //   serials = item.existedSerials;
        // }else
        // {
        //   serials =  this.storedSerialOfItems.find(x => x.id === item.itemId).storedSerials
        // }
        // سيريال
        //
        if (this.storedSerialOfItems.length > 0) {
            var i = this.storedSerialOfItems.findIndex(obj => obj.id === item.itemId);
            if (i > this.notFoundIndex && this.title != 'inventory')
                serials = this.storedSerialOfItems.find(x => x.id === item.itemId).storedSerials;
        }
        console.log(this.getQuantityObj);

        let data;

        // if (!index?.toString()) {
        //   item.newStoredSerials = [];
        //   this.itemCards.map((element) => {
        //     if (element.itemId === item.itemId) {
        //       if (element.newStoredSerials)
        //         item.newStoredSerials.push(...element.newStoredSerials);
        //     }
        //   });
        //   serials = item.newStoredSerials;
        // }

        // if (this.isEditMode) {
        //   this.itemCards.map((element) => {

        //     if (element.itemId === item.itemId && element.newStoredSerials) {
        //       if (!item.newStoredSerials) item.newStoredSerials = [];
        //       item.newStoredSerials.push(...element.newStoredSerials);
        //     }
        //   });

        //   if (item.newStoredSerials?.length > 0) {
        //     serials = item.newStoredSerials.filter((value, index, array) => {
        //       return array.indexOf(value) === index;
        //     });
        //   }
        // }
        //
        // سيريال
        this.oldSaledSerials = [];
        this.oldAvailableSerials = [];
        if (serials) this.oldAvailableSerials.push(...serials);
        if (item.listSerials) this.oldSaledSerials.push(...item.listSerials);
        data = {
            returnedWithId: false,
            itemNameAr: item.itemNameAr,
            itemNameEn: item.itemNameEn,
            serials: serials,
            oldReturnedSerials: item.listSerials,
            usedSerials: this.usedSerials,
            invoiceTypeId: this.InvoiceTypeId,
            getQuantityObj: this.getQuantityObj,
            serialsCout: this.serialsCout,
            title: this.title ?? ''
        }
        console.log(data)
        return (data);
        // isClosedWithSubmit : false,
    }
    preparePayLoadForAutoSetExpireItemData(item, index?: number) {
        return {
            invoiceTypeId: this.InvoiceTypeId ? this.InvoiceTypeId : '',
            itemId: item.itemId,
            unitId: item.unitId,
            storeId: this.storeId,
            quantity: +item.quantity,
            invoiceId: !this.isInvoiceComeFromPriceOffer ? this.formGroup?.get('invoiceId').value : 0,
            oldData: this.getValidityItemsInTable(index),
            EditedDate: index >= 0 ? item.expireDate : '',
            InvoiceDate: moment(this.formGroup?.get('invoiceDate').value).format('YYYY-MM-DD h:mm:ss'),
            discountValue: item.discountValue,
            serialRemovedInEdit: false,
            invoiceType: this.formGroup?.get('invoiceCode').value
        };
    }

    //========================= Open Modals  =========================
    openExpireItemModal(index?) {
        // debugger
        this.dialog.closeAll();
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        if (item.itemTypeId != this.expiryDateEnum) return;
        this.createCalculationObject();
        const dialogConfig = new MatDialogConfig();
        dialogConfig.width = '35%';
        dialogConfig.minWidth = '310px';
        dialogConfig.minHeight = '40vh';
        // dialogConfig.maxHeight = '75vh';
        dialogConfig.autoFocus = false;
        dialogConfig.restoreFocus = false;
        dialogConfig.disableClose = true;
        dialogConfig.data = {
            returnedWithId: false,
            itemCard: item,
            storeId: this.storeId,
            invoiceDate: moment(this.formGroup?.get('invoiceDate').value).format('YYYY-MM-DD h:mm:ss'),
            invoiceTypeId: this.InvoiceTypeId,
            decimals: this.decimals,
            calcObject: this.CalculationRequestObj
        };
        const dialogRef = this.dialog.open(ExpiresItemReturnedComponent, dialogConfig);
        dialogRef.afterClosed().subscribe(res => {
            console.log(res);
            if (!res) return;
            if (res.itemCards.length > 0) {
                this.openExpireItemModalResponseHandling(res, index);
            }
        });
    }

    // سيريال
    oldSaledSerials: any[] = [];
    oldAvailableSerials: any[] = [];
    openSerialItemSales(index?: number) {

        debugger;
        this.dialog.closeAll();
        const dialogConfig = new MatDialogConfig();
        dialogConfig.width = '40%';
        dialogConfig.minWidth = '310px';
        dialogConfig.minHeight = '40vh';
        // dialogConfig.maxHeight = '75vh';
        dialogConfig.autoFocus = false;
        dialogConfig.restoreFocus = false;
        dialogConfig.disableClose = true;
        //
        dialogConfig.data = this.SerialItemsDialogData(index);
        console.log( dialogConfig.data ,"configration ===>")

        const dialogRef = this.dialog.open(SerialItemReturnedComponent, dialogConfig);
        dialogRef.afterClosed().subscribe(res => {
            //
            if (!res) {
                // this.itemCards[index].listSerials = this.oldSaledSerials
                this.oldAvailableSerials = [];
                return;
            }
            // if (!res) return;
            this.onSerialDialogResponse(res, index);
        });
    }
    // new logic ===
    openCollectionSerialItemSales(index?: number) {

        debugger;
        this.dialog.closeAll();
        const dialogConfig = new MatDialogConfig();
        dialogConfig.width = '40%';
        dialogConfig.minWidth = '310px';
        dialogConfig.minHeight = '40vh';
        // dialogConfig.maxHeight = '75vh';
        dialogConfig.autoFocus = false;
        dialogConfig.restoreFocus = false;
        dialogConfig.disableClose = true;
        //  data = {
            // returnedWithId: false,
            // itemNameAr: item.itemNameAr,
            // itemNameEn: item.itemNameEn,
            // serials: serials,
            // oldReturnedSerials: item.listSerials,
            // usedSerials: this.usedSerials,
            // invoiceTypeId: this.InvoiceTypeId,
            // getQuantityObj: this.getQuantityObj,
            // serialsCout: this.serialsCout,
            // title: this.title ?? ''
        // }
        dialogConfig.data = {
            returnedWithId: false,
            itemNameAr: this.itemDetails.itemNameAr,
            itemNameEn: this.itemDetails.itemNameEn,
                serials: 'serials',
            oldReturnedSerials: "",
            usedSerials: this.usedSerials,
            invoiceTypeId: this.InvoiceTypeId,
            getQuantityObj: this.getQuantityObj,
            serialsCout: this.serialsCout,
            title: this.title ?? ""
        }
        const dialogRef = this.dialog.open(SerialItemReturnedComponent, dialogConfig);
        dialogRef.afterClosed().subscribe(res => {
            //
            if (!res) {
                // this.itemCards[index].listSerials = this.oldSaledSerials
                this.oldAvailableSerials = [];
                return;
            }
            // if (!res) return;
            this.onSerialDialogResponse(res, index);
        });
    }
    //========================= Modals response handling  =========================
    openExpireItemModalResponseHandling(res, index: number) {
        if (index >= 0) {
            //Loop on Responce array if the date === itemCard date replace element data
            res.itemCards.forEach(element => {
                if (
                    this.itemCards[index].expireDate == element.expireDate ||
                    (this.isInvoiceComeFromPriceOfferToSales && this.itemCards[index].expireDate === null)
                ) {
                    this.itemCards[index] = element;
                } else {
                    this.itemCards.unshift(element);
                    index++;
                }
            });
        } else {
            this.itemCards.unshift(...res.itemCards);
            this.expiresItem = true;
            this.addInvoicesDetails.emit(this.itemCards);
            this.quantityTooltip.ngbTooltip = '';
        }
        this.calculateTotalsAndDiscoundValue(false, index >= 0, index ? index : this.notFoundIndex, true);
        this.isInvoiceComeFromPriceOfferToSales = false;
    }
    SetQuantityForExpiryDateResponse(res, copyOfCurrentItem, index?: number) {
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        let totalQuantity = 0;
        res.data.forEach(el => {
            let isQuantityOfCopyOfCurrentItemGreaterThanQuantityOfDate = false;
            totalQuantity = el.quantityOfDate + totalQuantity;
            if (copyOfCurrentItem.quantity > totalQuantity)
                isQuantityOfCopyOfCurrentItemGreaterThanQuantityOfDate = true;
            else isQuantityOfCopyOfCurrentItemGreaterThanQuantityOfDate = false;
            copyOfCurrentItem.quantity = el.quantityOfDate;
            copyOfCurrentItem.total = +el.quantityOfDate * copyOfCurrentItem.price + el.totalPrice;
            copyOfCurrentItem.discountValue = el.discountValue;
            copyOfCurrentItem.discountRatio = copyOfCurrentItem.discountRatio;
            if (el.expiaryOfInvoice != copyOfCurrentItem.expireDate) {
                copyOfCurrentItem.expireDate = el.expiaryOfInvoice;
                if (index !== undefined && !isQuantityOfCopyOfCurrentItemGreaterThanQuantityOfDate) {
                    this.itemCards[index] = copyOfCurrentItem;
                } else {
                    this.itemCards.unshift(copyOfCurrentItem);
                    if (index !== undefined) index++;
                }
                this.isInvoiceComeFromPriceOfferToSales = false;
            } else {
                this.itemCards[index] = copyOfCurrentItem;
            }
            copyOfCurrentItem = Object.assign({}, item);
        });
    }
    onSerialDialogResponse(res, index: number) {
        debugger;
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        // سيريال
        let indexItem = this.getIndexOfExistSerialItemInTable(item.itemId);
        if (indexItem > this.notFoundIndex) this.storedSerialOfItems[indexItem].storedSerials = res.newStoredSerials;

        if (this.title === 'inventory') {
            item.listSerials = [...res.returnedSerials];
            item.quantity = this.serialsCout;
            item.actualQuantity = res.returnedSerials.length;
            item.quantityDifference = -(this.serialsCout - res.returnedSerials.length);
            item.serialsWillBeSettled = res.newStoredSerials;
        } else if (!index?.toString()) {
            //
            item.listSerials = [...res.returnedSerials];
            item.quantity = res.returnedSerials.length;
            this.focusInNext('addPrice');
            this.calculateTotalsAndDiscoundValue();
            // this.newStoredSerials = res.newStoredSerials.length;
            // this.itemCard.newStoredSerials = res.newStoredSerials;
        } else if (index?.toString()) {
            //
            item.listSerials = res.returnedSerials;
            item.quantity = res.returnedSerials.length;
            item.newStoredSerials = res.newStoredSerials;
            this.focusInNext('editPrice');
            this.calculateTotalsAndDiscoundValue(false, true, index);
            console.log(this.itemCards, 'itemCards');
            // this.setStoredSerials(res.newStoredSerials)
        }
        this.isItemQuantityNotAvilableInStorInAddMode = res.returnedSerials.length == 0;
    }

    // setStoredSerials(newStoredSerials){
    //   this.newStoredSerials = []
    //      this.newStoredSerials.push(newStoredSerials)
    // }
    /**************************************************************************************** */
    //*****************************start of modals for purchases***************************** */
    /**************************************************************************************** */
    itemCardPurchasePopups(typeId: number, isEdit: boolean, index?: number) {
        console.log({ index });

        if (!isEdit && typeId == this.expiryDateEnum) {
            this.expiresItem = true;
            this.isExpireItemAdded = false;
        }
        // to hide date input if it found
        else {
            this.isExpireItemAdded = true;
            this.isItemCardsArrayHaveExpireDate();
        }
        if (typeId == this.serialEnum) this.openSerialModalForEnum2(index);
        else if (typeId !== this.serialEnum && !isEdit) this.focusInNext('partQuantityInAddMode');
        else this.focusInNext('partQuantityInEditMode');
    }
    getAllUsedSerials() {
        //
        let otherSerials = [];
        otherSerials = this.itemDetails.listSerials;
        this.itemCards.forEach(el => {
            if (el.invoiceSerialDtos) {
                el.invoiceSerialDtos.map(serial => {
                    otherSerials.push(serial.serialNumber);
                });
            }
        });
        return otherSerials;
    }
    openSerialModalForEnum2(index: number, itemCode?: string) {
        this.dialog.closeAll();
        //
        let otherSerials = this.getAllUsedSerials();
        let item = index >= 0 ? this.itemCards[index] : this.itemDetails;
        const dialogConfig = new MatDialogConfig();
        dialogConfig.width = '35%';
        dialogConfig.minWidth = '310px';
        dialogConfig.minHeight = '40vh';
        // dialogConfig.maxHeight = '75vh';
        dialogConfig.autoFocus = false;
        dialogConfig.restoreFocus = false;
        dialogConfig.disableClose = true;
        // other >> // all serials in invoice (included item that edit) without new added serial
        // serials  >> // serials in item without new added serial

        //
        let itemCodeFocused = item.itemCode;
        dialogConfig.data = {
            itemCode: itemCodeFocused, // itemCode ? itemCode : this.itemDetails.itemCode,
            item: { serials: item.invoiceSerialDtos || [] },
            others: otherSerials.toString(),
            isReturnMode: this.returnMode,
            itemId: item.itemId,
            isClosedWithSubmit: false,
            invoiceType: this.formGroup?.get('invoiceCode').value,
            allDeletedSerialsInInvoice: this.allDeletedSerialsInInvoiceForPurchase
        };
        // invoiceType: this.isEditMode ? this.itemCards[index].invoiceCode : '',
        const dialogRef = this.dialog.open(SerialItemComponent, dialogConfig);
        dialogRef.afterClosed().subscribe(res => {
            //
            if (!res) return;
            //if (!dialogConfig.data.isClosedWithSubmit) return

            this.allDeletedSerialsInInvoiceForPurchase = res.deletedSerials;

            if (index >= 0) {
                let serials = [];
                this.itemCards[index].invoiceSerialDtos = res.serials;
                this.itemCards[index].quantity = res.serials.length;
                res.serials.forEach(serial => {
                    serials.push(serial.serialNumber);
                });
                //
                this.itemCards[index].listSerials = serials;
                this.focusInNext('editPrice');
            } else {
                this.itemDetails.invoiceSerialDtos = res.serials;
                this.itemDetails.quantity = res.serials.length;
                this.focusInNext('addPrice');
            }
        });
    }
    openItemCardModel() {
        const dialogConfig = new MatDialogConfig();
        dialogConfig.width = '75%';
        dialogConfig.minWidth = '310px';
        dialogConfig.height = '80vh';
        dialogConfig.direction = this.translate.currentLang == 'ar' ? 'rtl' : 'ltr';
        dialogConfig.panelClass = ['itemCardModal'];
        dialogConfig.data = {
            openFromPurchases: true
        };
        const dialogRef = this.dialog.open(AddItemCardComponent, dialogConfig);
        dialogRef.afterClosed().subscribe(res => {
            if (!res) return;
            //
            this.searchByItemCardCode(res.itemCode, false);
        });
    }
    //  to display expire alert when item card is expiration and isExpireAlert is true
    async isAddOrUpdateItemCardExpiredToItemCardsArray(isEdit: boolean, index?: number): Promise<boolean> {
        //
        if (isEdit && this.itemCards[index].expireDate === JSON.parse(this.copyOfArray[index]).expireDate) return true;
        // check if item card is expired or not
        let invoiceDateTimeStamp = new Date(this.formGroup.controls['invoiceDate'].value).getTime();
        let expireDate;
        if (isEdit) expireDate = new Date(this.itemCards[index].expireDate).getTime();
        else expireDate = new Date(this.itemDetails.expireDate).getTime();
        if (expireDate <= invoiceDateTimeStamp) return await this.isConfirmExpireDateAlertForEnum2();
        else return true;
    }
    async isConfirmExpireDateAlertForEnum2(): Promise<boolean> {
        let res = await Swal.fire({
            title: this.translate.instant('expireDateAlert'),
            confirmButtonText: this.translate.instant('ok'),
            cancelButtonText: this.translate.instant('cancel'),
            icon: 'warning',
            iconColor: '#facea8',
            showCancelButton: true,
            cancelButtonColor: '#757575',
            confirmButtonColor: 'rgb(48, 133, 214)',
            allowEnterKey: true
        });
        if (res.isConfirmed) return true;
        else {
            this.isAddButtonClicked = false;
            return false;
        }
    }

    /**************************************************************************************** */
    //********************************* Small Functions ************************************* */
    /**************************************************************************************** */

    SaveCopy() {
        this.copyOfArray = [];
        this.itemCards?.forEach(elm => {
            this.copyOfArray.push(JSON.stringify(elm));
        });
        this.calculateNumberOfPages();
    }
    isItemCardsArrayHaveExpireDate() {
        //
        this.expiresItem = false;
        this.itemCards?.forEach(elm => {
            //
            if (elm.itemTypeId == this.expiryDateEnum) {
                this.expiresItem = true;
            }
        });
    }
    getValidityItemsInTable(index?) {
        console.log();
        let itemCode = index >= 0 ? this.itemCards[index].itemCode : this.getQuantityObj?.ItemCode || '';
        let oldData = [];
        this.itemCards?.forEach((el, elIndex) => {
            if (el.itemTypeId == this.expiryDateEnum && (index < 0 || index != elIndex) && itemCode == el.itemCode) {
                oldData.push({
                    expiaryOfInvoice: el.expireDate,
                    quantityOfDate: +el.quantity,
                    conversionFactor: el.conversionFactor,
                    price: el.price
                });
            }
        });
        return oldData;
    }
    resetItemDetailsObject() {
        debugger;
        this.itemDetails = {
            toolQuantity: '',
            itemCode: '',
            itemNameAr: '',
            itemNameEn: '',
            itemName: '',
            itemId: 0,
            Item: {},
            quantity: null,
            oldQuantity: null,
            unitId: 0,
            vatValue: 0,
            discountValue: null,
            total: null,
            price: null,
            discountRatio: null,
            applyVat: true,
            vatRatio: '',
            itemTypeId: 0,
            unitNameAr: '',
            unitNameEn: '',
            unites: [],
            canEdit: true,
            canDelete: true,
            editable: false,
            deleteMode: false,
            quantityInStore: 0,
            storeQuantityWithOutInvoice: 0,
            expireDate: '',
            VatValue: 0,
            invoiceSerialDtos: [],
            splitedDiscountValue: 0,
            splitedDiscountRatio: 0,
            autoDiscount: 0,
            conversionFactor: 0,
            indexOfItem: 0,
            listSerials: [],
            serials: [[]],
            existedSerials: [],
            expiaryData: [],
            extractedSerials: [],
            isBalanceBarcode: false,
            isDiscountRatioItem: false,

            actualQuantity: null,
            quantityDifference: null,
            value: null
        };
        this.focusOnCode();
        this.isItemCardsArrayHaveExpireDate();
        this.dateForm.controls.expireDateInAddMode.patchValue(moment(this.dateTimeNowFromServer).format('YYYY-MM-DD'));
        this.isAddButtonClicked = false;
    }
    closeTooltip(isEdit) {
        if (isEdit) {
            this.editQuantityTooltip.ngbTooltip = '';
            this.editQuantityTooltip.close();
        } else {
            this.quantityTooltip.ngbTooltip = '';
            this.quantityTooltip.close();
        }
    }
    OnCalculateReq(calculationResult) {
        this.formGroup?.patchValue(calculationResult);
        this.netValue.emit(calculationResult.net);
    }
    resetItemCardArrayAndCurrentMode() {
        this.itemCards.forEach(elm => {
            elm.editable = false;
            elm.canEdit = true;
            elm.canDelete = true;
        });
        this.tableIsUpdated = false;
        this.onTableIsUpdated.emit(this.tableIsUpdated);
        this.SaveCopy();
        this.isItemCardsArrayHaveExpireDate();
        this.OnCalculateReq(this.calculationResponse);
        this.resetItemDetailsObject();
        this.addInvoicesDetails.emit(this.itemCards);
        this.isAddButtonClicked = false;
        // this.quantityTooltip.ngbTooltip = '';
        blur();
    }
    /**************************************************************************************** */
    /**********************************alerts functions************************************** */
    /**************************************************************************************** */

    SetAlertMessage(message?) {
        if (message) this.showAlert = message;
        else if (this.returnMode && this.isOverInvoice) {
            this.showAlert = 'Quantity-not-available-in-invoice';
        } else {
            this.showAlert = 'Quantity-not-available-in-stock';
        }
        setTimeout(() => (this.showAlert = ''), 3000);
    }
    setBackendErrorMessage(res: any) {
        if (this.translate.currentLang == 'ar') this.showAlert = res.errorMessageAr;
        else this.showAlert = res.errorMessageEn;
        this.isAddButtonClicked = false;
        setTimeout(() => (this.showAlert = ''), 3000);
    }
    showAddCustomerErrorAlert() {
        this.SetAlertMessage('add-customer');
        this.isAddButtonClicked = false;
        this.focusOnCode();
    }
    showItemCardErrorAlert(result) {
        if (result == 18) this.SetAlertMessage('itemNotFound');
        else if (result == 17) this.SetAlertMessage('itemYouEnteredIsNotActive');
    }
    /*********************************Block Native numbers*********************************************/
    // about display tooltip
    isContentOverflow(htmlElement: HTMLElement): boolean {
        return this._displayTooltipService.isOverflow(htmlElement);
    }
    /**************************************************************************************** */
    //****************************** Handle pagination ************************************** */
    /**************************************************************************************** */

    currentPage = 1;
    numberOfPages = 0;
    numberOfRowsInPage = 50;
    Pages = [];
    calculateNumberOfPages() {
        this.numberOfPages = Math.ceil(this.itemCards?.length / this.numberOfRowsInPage);
        this.Pages = [];
        for (let i = 1; i <= this.numberOfPages; i++) {
            this.Pages.push(i);
        }
        this.pushElementsArray();
    }
    getPrevData() {
        if (this.currentPage > 1) {
            this.currentPage -= 1;
            this.pushElementsArray();
        }
    }
    getNextData() {
        if (this.currentPage < this.numberOfPages) {
            this.currentPage += 1;
            this.pushElementsArray();
        }
    }
    goToSelectedPage(page) {
        this.currentPage = page;
        this.pushElementsArray();
    }
    goToFirstPage() {
        this.currentPage = 1;
        this.pushElementsArray();
    }
    displayedItems = [];
    pushElementsArray() {
        debugger;
        //let end = start + this.numberOfRowsInPage;
        let start = (this.currentPage - 1) * this.numberOfRowsInPage;
        let end = start + this.numberOfRowsInPage;
        this.displayedItems = [];
        for (let i = start; i < end && i < this.itemCards?.length; i++) {
            this.displayedItems.push(this.itemCards[i]);
        }
    }
    onDbClick(event) {
        console.log('dbClick');
        event.preventDefault();
        event.stopPropagation();
    }

    actualQuantityWithOther(event, index?) {
        console.log(event, index);

        if (index >= 0) {
            this.displayedItems[index].quantityDifference = this.itemCards[index].quantityDifference =
                this.displayedItems[index].actualQuantity - this.displayedItems[index].quantity;
            this.displayedItems[index].value = this.itemCards[index].value = +(
                this.displayedItems[index].quantityDifference * this.displayedItems[index].price
            ).toFixed(this.decimals);
        } else {
            if (event.target.value == 0 && this.itemDetails.quantity == 0) {
                this.itemDetails.actualQuantity = event.target.value = '';
                this.SetAlertMessage('zero-quantity');
            } else {
                this.itemDetails.quantityDifference = this.itemDetails.actualQuantity - this.itemDetails.quantity;
                this.itemDetails.value = +(this.itemDetails.quantityDifference * this.itemDetails.price).toFixed(
                    this.decimals
                );
            }
        }
        console.log(event, this.displayedItems[index]);
    }

    /****** Open Item Note Dialog *****/

    itemNote;
    openItemNoteDialog(item: any) {
        console.log(item, 'ITEM');

        const dialogRef = this.dialog.open(ItemNoteDialogComponent, {
            width: '50%',
            autoFocus: false,
            data: { item: item, generalOtherSettings: this.generalOtherSettings }
        });
        dialogRef.afterOpened().subscribe(() => {
            // If you want to focus another element or remove focus from all
            const element = document.getElementById('no-focus');
            if (element) {
                element.focus();
            }
            // }else {
            //   // Or blur the currently focused element
            //   const activeElement = document.activeElement as HTMLElement;
            //   if (activeElement) {
            //     activeElement.blur();
            //   }
            // }
        });

        dialogRef.afterClosed().subscribe(result => {
            console.log('The dialog was closed', result, this.displayedItems);

            this.itemNote = result.note;

            this.displayedItems.forEach(displayedItem => {
                if (item.itemId == displayedItem.itemId) {
                    item.itemNote = this.itemNote;
                    item.IsSelectedFromAnotherNote = result.IsSelectedFromAnotherNote;
                }
            });

            // Handle the result if needed
        });
    }

    /*********** delete Existing Note */

    deleteExistingNote(item: any) {
        console.log(item, 'DELETE');

        if (!item.id) item.itemNote = '';
        else
            this._generalService.deleteSpecificNote(item.id, true).subscribe(() => {
                item.itemNote = '';
            });
    }

    isShowd: boolean = false;
    isShowedText: string = '';
    showTooltip(e: any, ele: any) {
        if (e) {
            this.isShowedText = ele.dataset.title;
        } else {
            this.isShowedText = '';
        }
    }
}

html : 


<div class="container-fluid">
    <div class="d-flex justify-content-center">
        <div class="alert alert-danger col-12 text-right mt-3 invoice-error-alert" *ngIf="showPartAlert" role="alert">
            {{ showPartAlert | translate }}
        </div>
        <div class="alert alert-danger col-12 text-right mt-3 invoice-error-alert" *ngIf="showAlert" role="alert">
            {{ showAlert | translate }}
        </div>
    </div>
    <div class="customBorderedTable" [ngClass]="{ 'en-table': translate.currentLang == 'en' }">
        <div class="entryTable">
            <div class="table-responsive shadow">
                <table>
                    <thead>
                        <tr>
                            <th class="operationRow" style="width: 15%">
                                <span> {{ 'itemCode' | translate }} </span>
                            </th>
                            <th class="operationRow" style="min-width: 150px">
                                <div class="d-flex justify-content-between w-100">
                                    <span [ngClass]="translate.currentLang == 'en' ? 'mr-4' : 'ml-4 '" class="mt-1">
                                        {{ 'itemName' | translate }}
                                    </span>
                                    <button
                                        *ngIf="pageEnum == purchasesInvoiceEnum && !returnMode"
                                        class="btn successBtn-color add-item-btn"
                                        (click)="openItemCardModel()"
                                    >
                                        <fa-icon [icon]="['fas', 'plus']"></fa-icon>
                                    </button>
                                </div>
                            </th>
                            <th class="operationRow" style="width: 8%">
                                <span> {{ 'unit-n' | translate }} </span>
                            </th>
                            <ng-content select=".header"></ng-content>

                            <th class="operationRow" style="width: 8%">
                                <span> {{ quantityLabel | translate }} </span>
                            </th>
                            <th class="operationRow" style="width: 10%" *ngIf="title == 'inventory'">
                                <span>{{ 'actualQuantity' | translate }}</span>
                            </th>
                            <th class="operationRow" style="width: 10%" *ngIf="title == 'inventory'">
                                <span>{{ 'quantityDifference' | translate }}</span>
                            </th>
                            <th
                                class="operationRow"
                                style="width: 10%"
                                *ngIf="
                                    title != 'inventory' &&
                                    title != 'outgoingTransfer' &&
                                    title != 'incomingAransferAdd'
                                "
                            >
                                <span> {{ 'price-n' | translate }} </span>
                            </th>
                            <th
                                class="operationRow"
                                style="width: 10%"
                                *ngIf="
                                    (title == 'outgoingTransfer' || title == 'incomingAransferAdd') &&
                                    other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
                                "
                            >
                                <span> {{ 'price-n' | translate }} </span>
                            </th>
                            <!-- <th class="operationRow" style="width: 10%" *ngIf="title == 'inventory'">
                                <span> {{ 'value' | translate }} </span>
                            </th> -->
                            <th class="operationRow" style="width: 10%" *ngIf="ActiveDiscount">
                                <span>{{ 'discount' | translate }}</span>
                            </th>

                            <th
                                class="operationRow"
                                style="width: 10%"
                                *ngIf="
                                    title != 'inventory' &&
                                    title != 'outgoingTransfer' &&
                                    title != 'incomingAransferAdd'
                                "
                            >
                                <span style="margin-left: 35px"> {{ 'sum' | translate }} </span>
                            </th>
                            <th
                                class="operationRow"
                                style="width: 10%"
                                *ngIf="
                                    (title == 'outgoingTransfer' || title == 'incomingAransferAdd') &&
                                    other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
                                "
                            >
                                <span style="margin-left: 35px"> {{ 'sum' | translate }} </span>
                            </th>
                            <th
                                class="operationRow"
                                *ngIf="expiresItem && !isPriceOffer && !isInvoiceComeFromPriceOfferToSales"
                            >
                                <span>{{ 'validityDate' | translate }}</span>
                            </th>

                            <th class="operationRow">{{ 'action' | translate }}</th>
                        </tr>
                    </thead>
                    <!-- المحتوي قبل الاضافه  -->
                    <tbody *ngIf="isAddItems">
                        <tr>
                            <td style="width: 15%">
                                <div>
                                    <input
                                        style="min-width: 100px"
                                        class="form-control"
                                        type="text"
                                        [disabled]="tableIsUpdated"
                                        [(ngModel)]="itemDetails.itemCode"
                                        #inputTextRequest
                                        (keyup.enter)="searchByItemCardCode(itemDetails.itemCode, false)"
                                        (focus.out)="searchByItemCardCode(itemDetails.itemCode, false)"
                                        autocomplete="off"
                                        [placeholder]="'item-number' | translate"
                                    />
                                </div>
                            </td>
                            <td style="width: 30%; position: relative">
                                <app-autocomplete
                                    [disabled]="tableIsUpdated"
                                    class="w-100"
                                    autocompletePlaceHolder="itemName"
                                    [autocompleteDropdownData]="partsArrInAddMode"
                                    [autoAutoCompleteId]="'scrollerAutoCompleteInAddMode'"
                                    [extraOption]="itemDetails.Item"
                                    [isQueryStringChanged]="true"
                                    (selectedOption)="setSelectedOptionId($event, false)"
                                    (isGetAutocompleteDropdownData)="getItemsDropDown(false, false)"
                                    (autocompletePageNumber)="setAutocompletePageNumber($event)"
                                    (searchValue)="filterItemsAutoCompleteDropdown($event, false)"
                                    (autocompleteClosed)="resetItemsDropdown()"
                                    [isEndDataOfAutocomplete]="isEndOfAutoCompleteDataInAddMode"
                                ></app-autocomplete>
                            </td>
                            <td>
                                <div class="unitWidth d-flex">
                                    <div class="text-right w-100 m-auto">
                                        <select
                                            class="form-control p-0"
                                            #itemUnitInputInAddMode
                                            [(ngModel)]="itemDetails.unitId"
                                            (change)="changeUnit(itemDetails.unitId, false)"
                                            [disabled]="tableIsUpdated"
                                        >
                                            <option value="0" *ngIf="!itemDetails.unitId" disabled selected>
                                                {{ 'unit-n' | translate }}
                                            </option>

                                            <option *ngFor="let unit of itemDetails.unites" [ngValue]="unit.unitId">
                                                {{ unit['arabicName' | translate] }}
                                            </option>
                                        </select>
                                    </div>
                                </div>
                            </td>
                            <td class="unitWidth" style="width: 8%">
                                <div>
                                    <!-- type="number" -->

                                    <!--(keyup.enter) keypress-->
                                    <!-- (keyup.enter)="
                                    handelQuentityEnterKey();
                                    " -->
                                    <input
                                        class="form-control"
                                        [(ngModel)]="itemDetails.quantity"
                                        appDecimalNumbers
                                        #partQuantityInAddMode
                                        (keyup.enter)="
                                            focusInNext(
                                                ActivechangePrice ||
                                                    (!other_ShowPriceAndTotalInOutgoingAndIncommingTransfer &&
                                                        (title == 'outgoingTransfer' || title == 'incomingAransferAdd'))
                                                    ? 'addPrice'
                                                    : !ActiveDiscount || isDisableTableDiscount
                                                      ? ''
                                                      : 'addDisValue'
                                            )
                                        "
                                        placeholder="{{ 'quantity' | translate }}"
                                        autocomplete="off"
                                        #quantityTooltip="ngbTooltip"
                                        ngbTooltip
                                        triggers="focus"
                                        [autoClose]="'outside'"
                                        tooltipClass="my-custom-class"
                                        [disabled]="tableIsUpdated || title == 'inventory'"
                                        (focus)="focusQuantity()"
                                    />
                                </div>
                                <!-- </div> -->
                            </td>
                            <td class="unitWidth operationRow" style="min-width: 100px" *ngIf="title == 'inventory'">
                                <div class="d-flex">
                                    <input
                                        #actualQuantity
                                        class="form-control"
                                        placeholder="{{ 'actualQuantity' | translate }}"
                                        [(ngModel)]="itemDetails.actualQuantity"
                                        class="form-control shadow-none"
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        (input)="actualQuantityWithOther($event)"
                                        (keyup.enter)="focusInNext()"
                                        (focus)="focusQuantity()"
                                    />
                                </div>
                            </td>
                            <td class="unitWidth operationRow" style="min-width: 100px" *ngIf="title == 'inventory'">
                                <div class="d-flex">
                                    <input
                                        #addDisValue
                                        class="form-control"
                                        placeholder="{{ 'quantityDifference' | translate }}"
                                        [(ngModel)]="itemDetails.quantityDifference"
                                        class="form-control shadow-none"
                                        (keyup.enter)="
                                            itemDetails.discountValue <= 0 ? focusInNext('addDisRatio') : focusInNext()
                                        "
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        [disabled]="isDisableTableDiscount || tableIsUpdated || isDisRatio"
                                        (input)="itemDetails.discountRatio = 0; disableTotalDis('addDisValue')"
                                    />
                                </div>
                            </td>
                            <td
                                class="unitWidth operationRow"
                                *ngIf="
                                    title != 'inventory' &&
                                    title != 'outgoingTransfer' &&
                                    title != 'incomingAransferAdd'
                                "
                            >
                                <div>
                                    <input
                                        [(ngModel)]="itemDetails.price"
                                        [disabled]="
                                            (!ActivechangePrice &&
                                                InvoiceTypeId !== addPermissionTypeId &&
                                                InvoiceTypeId !== itemsFundsTypeId) ||
                                            tableIsUpdated
                                        "
                                        #addPrice
                                        class="form-control"
                                        (keyup.enter)="
                                            !isDisRatio
                                                ? focusInNext(
                                                      !ActiveDiscount || isDisableTableDiscount ? '' : 'addDisValue'
                                                  )
                                                : focusInNext()
                                        "
                                        placeholder="{{ 'price-n' | translate }}"
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        class="form-control shadow-none"
                                    />
                                </div>
                            </td>
                            <td
                                class="unitWidth operationRow"
                                *ngIf="
                                    (title == 'outgoingTransfer' || title == 'incomingAransferAdd') &&
                                    other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
                                "
                            >
                                <div>
                                    <input
                                        [(ngModel)]="itemDetails.price"
                                        [disabled]="
                                            (!ActivechangePrice &&
                                                InvoiceTypeId !== addPermissionTypeId &&
                                                InvoiceTypeId !== itemsFundsTypeId) ||
                                            tableIsUpdated
                                        "
                                        #addPrice
                                        class="form-control"
                                        (keyup.enter)="
                                            !isDisRatio
                                                ? focusInNext(
                                                      !ActiveDiscount || isDisableTableDiscount ? '' : 'addDisValue'
                                                  )
                                                : focusInNext()
                                        "
                                        placeholder="{{ 'price-n' | translate }}"
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        class="form-control shadow-none"
                                    />
                                </div>
                            </td>
                            <!-- <td class="unitWidth operationRow" *ngIf="title == 'inventory'">
                                <div>
                                    <input
                                        [(ngModel)]="itemDetails.value"
                                        [disabled]="title == 'inventory'"
                                        #addPrice
                                        class="form-control"
                                        (keyup.enter)="!isDisRatio ? focusInNext(!ActiveDiscount || isDisableTableDiscount ? '' : 'addDisValue') : focusInNext()"
                                        placeholder="{{ 'value' | translate }}"
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        class="form-control shadow-none"
                                    />
                                </div>
                            </td> -->

                            <td class="unitWidth operationRow" style="min-width: 100px" *ngIf="ActiveDiscount">
                                <div class="d-flex">
                                    <div>
                                        <input
                                            #addDisValue
                                            class="form-control"
                                            placeholder="{{ 'SR' | translate }}"
                                            [(ngModel)]="
                                                itemDetails.splitedDiscountValue
                                                    ? itemDetails.splitedDiscountValue
                                                    : itemDetails.discountValue
                                            "
                                            class="form-control shadow-none"
                                            (keyup.enter)="
                                                itemDetails.discountValue <= 0
                                                    ? focusInNext('addDisRatio')
                                                    : focusInNext()
                                            "
                                            appDecimalNumbers
                                            [decimals]="decimals"
                                            [disabled]="isDisableTableDiscount || tableIsUpdated || isDisRatio"
                                            (input)="itemDetails.discountRatio = 0; disableTotalDis('addDisValue')"
                                        />
                                    </div>
                                    <div>
                                        <input
                                            #addDisRatio
                                            class="form-control"
                                            placeholder="%"
                                            [(ngModel)]="
                                                itemDetails.splitedDiscountRatio
                                                    ? itemDetails.splitedDiscountRatio
                                                    : itemDetails.discountRatio
                                            "
                                            class="form-control shadow-none"
                                            (keyup.enter)="focusInNext()"
                                            appDecimalNumbers
                                            [decimals]="decimals"
                                            (input)="itemDetails.discountValue = 0; disableTotalDis('addDisRatio')"
                                            [disabled]="isDisableTableDiscount || tableIsUpdated || isDisValue"
                                        />
                                    </div>
                                </div>
                            </td>

                            <td
                                class="unitWidth operationRow"
                                *ngIf="
                                    title != 'inventory' &&
                                    title != 'outgoingTransfer' &&
                                    title != 'incomingAransferAdd'
                                "
                            >
                                <div class="form-group custom-form-group">
                                    <input
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        readonly
                                        placeholder="{{ 'sum' | translate }}"
                                        class="form-control shadow-none"
                                    />
                                </div>
                            </td>
                            <td
                                class="unitWidth operationRow"
                                *ngIf="
                                    (title == 'outgoingTransfer' || title == 'incomingAransferAdd') &&
                                    other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
                                "
                            >
                                <div class="form-group custom-form-group">
                                    <input
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        readonly
                                        placeholder="{{ 'sum' | translate }}"
                                        class="form-control shadow-none"
                                    />
                                </div>
                            </td>
                            <td
                                class="unitWidth operationRow"
                                *ngIf="expiresItem && !isPriceOffer && !isInvoiceComeFromPriceOfferToSales"
                                [formGroup]="dateForm"
                            >
                                <h3
                                    style="width: 130px"
                                    *ngIf="pageEnum === salesInvoiceEnum || pageEnum === posInvoiceEnum"
                                >
                                    {{ itemDetails.expireDate | date: 'dd/MM/yyyy' }}
                                </h3>
                                <!-- [hidden]="!itemForm.get('expireDate').disabled" -->
                                <!-- [hidden]="itemForm.get('expireDate').disabled" -->

                                <div
                                    class="form-group custom-form-group"
                                    *ngIf="pageEnum === purchasesInvoiceEnum && !isExpireItemAdded"
                                >
                                    <input
                                        placeholder="{{ 'validityDate' | translate }}"
                                        type="date"
                                        formControlName="expireDateInAddMode"
                                        class="form-control"
                                    />
                                </div>
                            </td>
                            <td class="unitWidth" style="width: 0%">
                                <div class="d-flex my-2">
                                    <button
                                        class="btn addItemBtn primaryBtn-color m-auto"
                                        (click)="CheckItemAvailability(true)"
                                        [disabled]="!itemDetails.quantity && !(title == 'inventory' && itemDetails)"
                                        #addItemsInput
                                    >
                                        <fa-icon class="align-top" [icon]="['fas', 'plus']"></fa-icon>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    </tbody>

                    <tbody>
                        <tr
                            *ngFor="let item of displayedItems; let i = index"
                            [ngClass]="{ 'bg-grey': item?.isSettled }"
                            [title]="
                                item?.isSettled
                                    ? translate.currentLang == 'ar'
                                        ? 'تم التسوية من قبل'
                                        : 'It was settled before'
                                    : ''
                            "
                        >
                            <!-- *ngIf="!item.editable" -->
                            <td>
                                <h3
                                    style="max-width: 150px; margin: 0"
                                    class="truncate"
                                    [matTooltip]="item?.itemCode"
                                    [matTooltipClass]="'wtt-100'"
                                    #itemCodeInput
                                    [matTooltipDisabled]="!isContentOverflow(itemCodeInput)"
                                >
                                    <span
                                        ><a
                                            [ngClass]="{ 'text-settlement': item?.isSettled }"
                                            *ngIf="canShowDetails"
                                            title="اضغط للعرض"
                                            class="desModell"
                                            (click)="openItemCardDetails(item.itemId)"
                                        >
                                            {{ item.itemCode }}
                                        </a>

                                        <span *ngIf="!canShowDetails">{{ item.itemCode }}</span>
                                    </span>
                                </h3>
                                <!-- <div class="form-group custom-form-group" *ngIf="item.editable">
                <div>
                  <input
                    class="form-control"
                    type="text"
                    [(ngModel)]="item.itemCode"
                    #inputTextRequestEdit
                    (keyup.enter)="searchByItemCardCode(item.itemCode, true, i)"
                    (focus.out)="
                      searchByItemCardCode(itemDetails.itemCode, true, i)
                    "
                    autocomplete="off"
                    [placeholder]="'item-number' | translate"
                  />
                </div>
              </div> -->
                            </td>
                            <td
                                [ngClass]="{ 'text-settlement': item?.isSettled }"
                                class="operationRow"
                                style="width: 25%; max-width: 175px"
                            >
                                <!-- *ngIf="!item.editable" -->
                                <!-- [matTooltip]="item.Item?.arabicName" -->
                                <!-- style="max-width:170px; margin: 0" -->
                                <p
                                    class="truncate mb-0"
                                    [matTooltip]="item.Item['arabicName' | translate]"
                                    [matTooltipClass]="'wtt-100'"
                                    #itemArabicNameInput
                                    [matTooltipDisabled]="!isContentOverflow(itemArabicNameInput)"
                                >
                                    <span>
                                        {{
                                            item.Item
                                                ? item.Item['arabicName' | translate]
                                                : item['itemNameAr' | translate]
                                        }}
                                    </span>
                                </p>

                                <!-- itemNote -->
                                <p
                                    class="truncate mb-0 item-note"
                                    appTooltip
                                    (isShowed)="showTooltip($event, noteCol)"
                                    [matTooltip]="item.itemNote"
                                    [matTooltipClass]="'wtt-100'"
                                    #noteCol
                                    *ngIf="item.itemNote"
                                >
                                    <span>
                                        {{ item.itemNote }}
                                    </span>
                                </p>
                                <!-- <div *ngIf="item.editable">
                <div>
                  <div>
                    <app-autocomplete
                      class="w-100"
                      autocompletePlaceHolder="itemName"
                      [autocompleteDropdownData]="partsArrInEditMode"
                      [autoAutoCompleteId]="scrollerAutoCompleteInAddMode"
                      [extraOption]="item.Item"
                      [isQueryStringChanged]="true"
                      (selectedOption)="setSelectedOptionId($event, true, i)"
                      (isGetAutocompleteDropdownData)="getDropdownData(true)"
                      (autocompletePageNumber)="
                        setAutocompletePageNumber($event, true)
                      "
                      (searchValue)="
                        filterItemsAutoCompleteDropdown($event, true)
                      "
                    ></app-autocomplete>
                  </div>
                </div>
              </div>-->
                            </td>
                            <td
                                [ngClass]="{ 'text-settlement': item?.isSettled }"
                                class="operationRow"
                                style="width: 8%; max-width: 105px"
                            >
                                <!-- <h3 *ngIf="!item.editable">{{ item.unit.arabicName }}</h3> -->
                                <h3
                                    style="width: 111.75px"
                                    *ngIf="!item.editable"
                                    class="truncate d-block"
                                    [matTooltip]="item['unitNameAr' | translate]"
                                    [matTooltipClass]="'wtt-100'"
                                    #itemUnitInput
                                    [matTooltipDisabled]="!isContentOverflow(itemUnitInput)"
                                >
                                    {{ item['unitNameAr' | translate] }}
                                </h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <div appearance="outline" class="text-right w-100 m-auto">
                                        <select
                                            #itemUnitInputInEditMode
                                            [(ngModel)]="item.unitId"
                                            class="form-control p-0"
                                            aria-placeholder=""
                                            (change)="
                                                changeUnit(
                                                    item.unitId,
                                                    true,
                                                    i + (currentPage - 1) * numberOfRowsInPage
                                                )
                                            "
                                            (click)="getUnitsDropdownForItem(this.item.itemId, true, i)"
                                        >
                                            <option *ngIf="!item.unitId" value="0" disabled selected>
                                                {{ 'unit-n' | translate }}
                                            </option>
                                            <option *ngFor="let unit of item.unites" [ngValue]="unit.unitId">
                                                {{ unit['arabicName' | translate] }}
                                            </option>
                                        </select>
                                    </div>
                                </div>
                            </td>
                            <!-- This if you want to add more columns from parent data -->
                            <ng-container
                                *ngTemplateOutlet="
                                    rowTemplate;
                                    context: {
                                        $implicit: item,
                                        index: i + (currentPage - 1) * numberOfRowsInPage
                                    }
                                "
                            ></ng-container>

                            <td
                                class="operationRow"
                                *ngIf="!isParentQuantityCheck && title != 'inventory'"
                                style="width: 10%"
                            >
                                <!-- <span class="tooltiptext">{{item.toolQuantity}}</span> -->
                                <!-- -->
                                <h3
                                    (click)="
                                        item.editable || (!item.editable && item.itemTypeId == serialEnum)
                                            ? getQuantityOnRow(i + (currentPage - 1) * numberOfRowsInPage, true, true)
                                            : ''
                                    "
                                    [ngbTooltip]="item.toolQuantity"
                                    triggers="click"
                                    [autoClose]="'outside'"
                                    tooltipClass="my-custom-class"
                                    style="cursor: pointer"
                                    *ngIf="!item.editable"
                                >
                                    {{ item.itemTypeId != noteEnum ? item.quantity : '' }}
                                </h3>
                                <!-- (input)="CheckIfOverQuantity(item, true,i)" (keyup.enter)="CheckIfOverQuantity"-->
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <div>
                                        <input
                                            class="form-control"
                                            [(ngModel)]="item.quantity"
                                            #partQuantityInEditMode
                                            appDecimalNumbers
                                            [decimals]="decimals"
                                            (keyup.enter)="
                                                focusInNext(
                                                    ActivechangePrice ||
                                                        (!other_ShowPriceAndTotalInOutgoingAndIncommingTransfer &&
                                                            title == 'outgoingTransfer') ||
                                                        title == 'incomingAransferAdd'
                                                        ? 'editPrice'
                                                        : !ActiveDiscount || isDisableTableDiscount
                                                          ? ''
                                                          : 'editDisValue',
                                                    i + (currentPage - 1) * numberOfRowsInPage
                                                )
                                            "
                                            placeholder="{{ 'quantity' | translate }}"
                                            autocomplete="off"
                                            #editQuantityTooltip="ngbTooltip"
                                            ngbTooltip
                                            triggers="focus"
                                            [autoClose]="'outside'"
                                            tooltipClass="my-custom-class"
                                            (focus)="focusQuantity(i + (currentPage - 1) * numberOfRowsInPage)"
                                        />
                                    </div>
                                </div>
                            </td>
                            <td
                                class="operationRow"
                                *ngIf="
                                    title != 'inventory' &&
                                    title != 'outgoingTransfer' &&
                                    title != 'incomingAransferAdd'
                                "
                            >
                                <h3 *ngIf="!item.editable">
                                    {{ item.itemTypeId != noteEnum ? item.price : '' }}
                                </h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <div>
                                        <input
                                            [(ngModel)]="item.price"
                                            [disabled]="!ActivechangePrice"
                                            class="form-control"
                                            #editPrice
                                            (keyup.enter)="
                                                focusInNext(
                                                    (ActiveDiscount || isDisableTableDiscount) && !isDisRatio
                                                        ? 'editDisValue'
                                                        : '',
                                                    i + (currentPage - 1) * numberOfRowsInPage
                                                );
                                                CheckItemAvailability(
                                                    !ActiveDiscount || (isDisableTableDiscount && isDisRatio),
                                                    true,
                                                    i + (currentPage - 1) * numberOfRowsInPage
                                                )
                                            "
                                            placeholder=" {{ 'price-n' | translate }} "
                                            appDecimalNumbers
                                            [decimals]="decimals"
                                            class="form-control shadow-none"
                                        />
                                    </div>
                                </div>
                            </td>
                            <td
                                class="operationRow"
                                *ngIf="
                                    (title == 'outgoingTransfer' || title == 'incomingAransferAdd') &&
                                    other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
                                "
                            >
                                <h3 *ngIf="!item.editable">
                                    {{ item.itemTypeId != noteEnum ? item.price : '' }}
                                </h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <div>
                                        <input
                                            [(ngModel)]="item.price"
                                            [disabled]="!ActivechangePrice"
                                            class="form-control"
                                            #editPrice
                                            (keyup.enter)="
                                                focusInNext(
                                                    (ActiveDiscount || isDisableTableDiscount) && !isDisRatio
                                                        ? 'editDisValue'
                                                        : '',
                                                    i + (currentPage - 1) * numberOfRowsInPage
                                                );
                                                CheckItemAvailability(
                                                    !ActiveDiscount || (isDisableTableDiscount && isDisRatio),
                                                    true,
                                                    i + (currentPage - 1) * numberOfRowsInPage
                                                )
                                            "
                                            placeholder=" {{ 'price-n' | translate }} "
                                            appDecimalNumbers
                                            [decimals]="decimals"
                                            class="form-control shadow-none"
                                        />
                                    </div>
                                </div>
                            </td>
                            <td class="operationRow" style="width: 12%" *ngIf="ActiveDiscount">
                                <div *ngIf="!item.editable">
                                    <div class="row">
                                        <div
                                            class="col-6 discount-border"
                                            [ngClass]="{
                                                'discount-border-en': translate.currentLang == 'en'
                                            }"
                                        >
                                            <span style="padding: 7">
                                                {{ item.discountValue ? item?.discountValue : '-' }}
                                            </span>
                                        </div>
                                        <div class="col-6">
                                            <span style="padding: 7">
                                                {{ item.discountRatio ? item?.discountRatio : '-' }}
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group custom-form-group d-flex" *ngIf="item.editable">
                                    <div class="d-flex">
                                        <div>
                                            <input
                                                #editDisValue
                                                class="form-control"
                                                [(ngModel)]="item.discountValue"
                                                placeholder="{{ 'SR' | translate }}"
                                                class="form-control shadow-none"
                                                (keyup.enter)="
                                                    item.discountValue <= 0
                                                        ? focusInNext('editDisRatio')
                                                        : CheckItemAvailability(
                                                              true,
                                                              true,
                                                              i + (currentPage - 1) * numberOfRowsInPage
                                                          )
                                                "
                                                appDecimalNumbers
                                                [decimals]="decimals"
                                                [disabled]="
                                                    isDisableTableDiscount ||
                                                    (item.isDiscountRatioItem && item.discountRatio != 0)
                                                "
                                                (input)="
                                                    item.discountRatio = 0;
                                                    disableTotalDis(
                                                        'editDisValue',
                                                        i + (currentPage - 1) * numberOfRowsInPage
                                                    )
                                                "
                                            />
                                        </div>
                                        <div>
                                            <input
                                                appDecimalNumbers
                                                [decimals]="decimals"
                                                #editDisRatio
                                                class="form-control"
                                                placeholder="%"
                                                [(ngModel)]="item.discountRatio"
                                                class="form-control shadow-none"
                                                (keyup.enter)="
                                                    CheckItemAvailability(
                                                        true,
                                                        true,
                                                        i + (currentPage - 1) * numberOfRowsInPage
                                                    )
                                                "
                                                [disabled]="
                                                    isDisableTableDiscount ||
                                                    (!item.isDiscountRatioItem && item.discountValue != 0)
                                                "
                                                (input)="
                                                    item.discountValue = 0;
                                                    disableTotalDis(
                                                        'editDisRatio',
                                                        i + (currentPage - 1) * numberOfRowsInPage
                                                    )
                                                "
                                            />
                                        </div>
                                    </div>
                                </div>
                            </td>
                            <td
                                class="operationRow"
                                *ngIf="
                                    title != 'inventory' &&
                                    title != 'outgoingTransfer' &&
                                    title != 'incomingAransferAdd'
                                "
                            >
                                <h3 *ngIf="!item.editable">{{ item.total }}</h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <input
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        readonly
                                        placeholder="{{ 'sum' | translate }}"
                                        class="form-control shadow-none"
                                        [(ngModel)]="item.total"
                                    />
                                </div>
                            </td>
                            <td
                                class="operationRow"
                                *ngIf="
                                    (title == 'outgoingTransfer' || title == 'incomingAransferAdd') &&
                                    other_ShowPriceAndTotalInOutgoingAndIncommingTransfer
                                "
                            >
                                <h3 *ngIf="!item.editable">{{ item.total }}</h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <input
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        readonly
                                        placeholder="{{ 'sum' | translate }}"
                                        class="form-control shadow-none"
                                        [(ngModel)]="item.total"
                                    />
                                </div>
                            </td>
                            <td
                                class="operationRow"
                                *ngIf="expiresItem && !isPriceOffer && !isInvoiceComeFromPriceOfferToSales"
                            >
                                <h3
                                    style="width: 130px"
                                    *ngIf="
                                        (item.expireDate &&
                                            (pageEnum === salesInvoiceEnum ||
                                                pageEnum === posInvoiceEnum ||
                                                returnMode)) ||
                                        (pageEnum == purchasesInvoiceEnum && !item.editable) ||
                                        isParentQuantityCheck
                                    "
                                >
                                    {{ item.expireDate | date: 'dd/MM/yyyy' }}
                                </h3>
                                <!-- <h3 style="width: 130px" *ngIf="
                  item.expireDate &&
                  pageEnum === purchasesInvoiceEnum&&
                  !item.editable &&
                  !returnMode
                ">
                {{ item.expireDate | date : "dd/MM/yyyy" }}
              </h3> -->

                                <!-- [hidden]="!itemForm.get('expireDate').disabled" -->
                                <!-- [hidden]="itemForm.get('expireDate').disabled" -->
                                <div
                                    class="form-group custom-form-group"
                                    *ngIf="
                                        item.editable &&
                                        item.itemTypeId === expiryDateEnum &&
                                        !isParentQuantityCheck &&
                                        pageEnum == purchasesInvoiceEnum &&
                                        !returnMode
                                    "
                                >
                                    <input
                                        placeholder="{{ 'validityDate' | translate }}"
                                        type="date"
                                        #datePickerInput
                                        [(ngModel)]="item.expireDate"
                                        class="form-control"
                                        (change)="
                                            CheckIfOverQuantity(item, true, i + (currentPage - 1) * numberOfRowsInPage)
                                        "
                                    />
                                </div>
                            </td>
                            <td
                                [ngClass]="{ 'text-settlement': item?.isSettled }"
                                class="operationRow"
                                *ngIf="title == 'inventory'"
                            >
                                <h3 *ngIf="!item.editable">{{ item.quantity }}</h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <input
                                        appDecimalNumbers
                                        readonly
                                        placeholder="{{ 'quantity' | translate }}"
                                        class="form-control shadow-none"
                                        [(ngModel)]="item.quantity"
                                    />
                                </div>
                            </td>
                            <td
                                [ngClass]="{ 'text-settlement': item?.isSettled }"
                                class="operationRow"
                                *ngIf="title == 'inventory'"
                            >
                                <h3 *ngIf="!item.editable">{{ item.actualQuantity }}</h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <input
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        placeholder="{{ 'actualQuantity' | translate }}"
                                        class="form-control shadow-none"
                                        [(ngModel)]="item.actualQuantity"
                                        (input)="actualQuantityWithOther($event, i)"
                                        (keyup.enter)="focusInNext('', i + (currentPage - 1) * numberOfRowsInPage)"
                                        (focus)="focusQuantity(i + (currentPage - 1) * numberOfRowsInPage)"
                                    />
                                </div>
                            </td>
                            <td
                                [ngClass]="{ 'text-settlement': item?.isSettled }"
                                class="operationRow"
                                *ngIf="title == 'inventory'"
                            >
                                <h3 *ngIf="!item.editable">{{ item.quantityDifference }}</h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <input
                                        appDecimalNumbers
                                        [decimals]="decimals"
                                        readonly
                                        placeholder="{{ 'quantityDifference' | translate }}"
                                        class="form-control shadow-none"
                                        [(ngModel)]="item.quantityDifference"
                                    />
                                </div>
                            </td>
                            <!-- <td class="operationRow"  *ngIf="title == 'inventory'">
                                <h3 *ngIf="!item.editable">{{ item.value }}</h3>
                                <div class="form-group custom-form-group" *ngIf="item.editable">
                                    <input appDecimalNumbers [decimals]="decimals" readonly placeholder="{{ 'value' | translate }}" class="form-control shadow-none" [(ngModel)]="item.value" />
                                </div>
                            </td> -->
                            <td class="operationRow actions-btn text-center" style="width: 3%">
                                <div class="d-inline-flex" *ngIf="!item.editable && !item.deleteMode">
                                    <button
                                        mat-icon-button
                                        class="actionBtn successColor custom-width border-0"
                                        (click)="
                                            itemCards[i + (currentPage - 1) * numberOfRowsInPage].editable = true;
                                            OnUpdateItem(i + (currentPage - 1) * numberOfRowsInPage)
                                        "
                                        [disabled]="!item.canEdit || item.itemTypeId == noteEnum || item?.isSettled"
                                    >
                                        <fa-icon [icon]="['fas', 'pencil-alt']"></fa-icon>
                                    </button>
                                    <div class="horizontalLine" *ngIf="!isNotDeleteItem"></div>
                                    <button
                                        mat-icon-button
                                        class="actionBtn dangerColor custom-width border-0"
                                        *ngIf="!isNotDeleteItem"
                                        [disabled]="
                                            !item.canDelete || item.canDeleteFromApi === false || item?.isSettled
                                        "
                                        (click)="
                                            itemCards[i + (currentPage - 1) * numberOfRowsInPage].deleteMode = true
                                        "
                                    >
                                        <fa-icon [icon]="['far', 'trash-alt']"></fa-icon>
                                    </button>

                                    <!-- Menue  itemNote>> -->
                                    <div
                                        class="horizontalLine"
                                        *ngIf="
                                            (!isNotDeleteItem && generalOtherSettings?.showItemBalanceInStores) ||
                                            generalOtherSettings?.addItemNote
                                        "
                                    ></div>

                                    <div
                                        class="dropdown"
                                        *ngIf="
                                            generalOtherSettings?.showItemBalanceInStores ||
                                            generalOtherSettings?.addItemNote
                                        "
                                    >
                                        <button
                                            mat-icon-button
                                            class="actionBtn primaryColor item-dropdown"
                                            type="button"
                                            id="dropdownMenuButton"
                                            data-toggle="dropdown"
                                            aria-haspopup="true"
                                            aria-expanded="false"
                                        >
                                            <fa-icon [icon]="['fas', 'ellipsis-v']"></fa-icon>
                                        </button>

                                        <div class="dropdown-menu text-right" aria-labelledby="dropdownMenuButton">
                                            <button
                                                class="dropdown-item"
                                                *ngIf="generalOtherSettings?.showItemBalanceInStores"
                                            >
                                                {{ 'itemBalanceInStore' | translate }}
                                            </button>
                                            <button class="dropdown-item" *ngIf="generalOtherSettings?.addItemNote">
                                                <span *ngIf="!item.itemNote" (click)="openItemNoteDialog(item)">
                                                    {{ 'addItemNote' | translate }}
                                                </span>

                                                <span *ngIf="item.itemNote" (click)="deleteExistingNote(item)">
                                                    {{ 'deleteNote' | translate }}
                                                </span>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="d-inline-flex" *ngIf="item.editable && !item.deleteMode">
                                    <!-- item.disUpdatebtn || -->
                                    <button
                                        mat-icon-button
                                        class="actionBtn successColor update-btn-row custom-width border-0 d-flex justify-content-center align-content-center"
                                        (click)="
                                            CheckItemAvailability(
                                                true,
                                                true,
                                                i + (currentPage - 1) * numberOfRowsInPage
                                            )
                                        "
                                        [disabled]="
                                            ((!item.quantity || item.quantity == 0 || item.price == 0) &&
                                                title != 'inventory' &&
                                                InvoiceTypeId !== InComingTransferTypeId) ||
                                            !isAvailableQuantity
                                        "
                                    >
                                        <fa-icon [icon]="['fas', 'save']"></fa-icon>
                                    </button>

                                    <div class="horizontalLine"></div>
                                    <button
                                        mat-icon-button
                                        class="actionBtn dangerColor custom-width border-0 d-flex justify-content-center align-content-center"
                                        (click)="cancelEditing(i + (currentPage - 1) * numberOfRowsInPage)"
                                    >
                                        <fa-icon [icon]="['fas', 'times']"></fa-icon>
                                    </button>
                                </div>
                                <div class="d-inline-flex" *ngIf="item.deleteMode">
                                    <button
                                        mat-icon-button
                                        class="actionBtn successColor custom-width border-0 d-flex justify-content-center align-content-center"
                                        (click)="deleteItem(i + (currentPage - 1) * numberOfRowsInPage)"
                                        [disabled]="!item.canDelete"
                                    >
                                        <i class="fas fa-check"></i>
                                    </button>
                                    <div class="horizontalLine"></div>
                                    <button
                                        mat-icon-button
                                        class="actionBtn dangerColor custom-width border-0 d-flex justify-content-center align-content-center"
                                        (click)="
                                            itemCards[i + (currentPage - 1) * numberOfRowsInPage].deleteMode = false
                                        "
                                    >
                                        <fa-icon [icon]="['fas', 'times']"></fa-icon>
                                    </button>
                                </div>
                            </td>
                        </tr>
                        <!-- <div class="items-spanner"  *ngIf="x">
          <div class="spinner-border text-primary " role="status">
          <span class="sr-only">Loading...</span>
        </div>
        </div> -->
                    </tbody>
                </table>
            </div>
            <!-- <h1>
        {{isAddButtonClicked}}
      </h1> -->
        </div>
    </div>
    <div class="d-flex justify-content-center" *ngIf="itemCards?.length > numberOfRowsInPage">
        <div class="mx-3 pointer pointer-blue" *ngIf="currentPage > 1">
            <button (click)="getPrevData()" class="page-link">
                <fa-icon [icon]="['fas', 'angle-right']"></fa-icon>
            </button>
        </div>
        <div
            *ngFor="let page of Pages; let index = index"
            class="pagination-page page-item ng-star-inserted"
            [ngClass]="{ active: page == currentPage }"
        >
            <button (click)="goToSelectedPage(page)" class="page-link">
                {{ page }}
            </button>
        </div>
        <div class="mx-3 pointer pointer-blue" *ngIf="currentPage < numberOfPages">
            <button (click)="getNextData()" class="page-link">
                <fa-icon [icon]="['fas', 'angle-left']"></fa-icon>
            </button>
        </div>
    </div>
</div>
